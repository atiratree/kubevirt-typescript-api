/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";
import {V1VirtualMachine} from "./mappers";


/**
 * @interface
 * An interface representing V1GroupVersionForDiscovery.
 * GroupVersion contains the "group/version" and "version" string of a version.
 * It is made a struct to keep extensibility.
 *
 */
export interface V1GroupVersionForDiscovery {
  /**
   * @member {string} groupVersion groupVersion specifies the API group and
   * version in the form "group/version"
   */
  groupVersion: string;
  /**
   * @member {string} version version specifies the version in the form of
   * "version". This is to save the clients the trouble of splitting the
   * GroupVersion.
   */
  version: string;
}

/**
 * @interface
 * An interface representing V1ServerAddressByClientCIDR.
 * ServerAddressByClientCIDR helps the client to determine the server address
 * that they should use, depending on the clientCIDR that they match.
 *
 */
export interface V1ServerAddressByClientCIDR {
  /**
   * @member {string} clientCIDR The CIDR with which clients can match their IP
   * to figure out the server address that they should use.
   */
  clientCIDR: string;
  /**
   * @member {string} serverAddress Address of this server, suitable for a
   * client that matches the above CIDR. This can be a hostname, hostname:port,
   * IP or IP:port.
   */
  serverAddress: string;
}

/**
 * @interface
 * An interface representing V1APIGroup.
 * APIGroup contains the name, the supported versions, and the preferred
 * version of a group.
 *
 */
export interface V1APIGroup {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {string} name name is the name of the group.
   */
  name: string;
  /**
   * @member {V1GroupVersionForDiscovery} [preferredVersion] preferredVersion
   * is the version preferred by the API server, which probably is the storage
   * version.
   */
  preferredVersion?: V1GroupVersionForDiscovery;
  /**
   * @member {V1ServerAddressByClientCIDR[]} [serverAddressByClientCIDRs] a map
   * of client CIDR to server address that is serving this group. This is to
   * help clients reach servers in the most network-efficient way possible.
   * Clients can use the appropriate server address as per the CIDR that they
   * match. In case of multiple matches, clients should use the longest
   * matching CIDR. The server returns only those CIDRs that it thinks that the
   * client can match. For example: the master will return an internal IP CIDR
   * only, if the client reaches the server using an internal IP. Server looks
   * at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in
   * that order) to get the client IP.
   */
  serverAddressByClientCIDRs?: V1ServerAddressByClientCIDR[];
  /**
   * @member {V1GroupVersionForDiscovery[]} versions versions are the versions
   * supported in this group.
   */
  versions: V1GroupVersionForDiscovery[];
}

/**
 * @interface
 * An interface representing V1APIGroupList.
 * APIGroupList is a list of APIGroup, to allow clients to discover the API at
 * /apis.
 *
 */
export interface V1APIGroupList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1APIGroup[]} groups groups is a list of APIGroup.
   */
  groups: V1APIGroup[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
}

/**
 * @interface
 * An interface representing V1APIResource.
 * APIResource specifies the name of a resource and whether it is namespaced.
 *
 */
export interface V1APIResource {
  /**
   * @member {string[]} [categories] categories is a list of the grouped
   * resources this resource belongs to (e.g. 'all')
   */
  categories?: string[];
  /**
   * @member {string} [group] group is the preferred group of the resource.
   * Empty implies the group of the containing resource list. For subresources,
   * this may have a different value, for example: Scale".
   */
  group?: string;
  /**
   * @member {string} kind kind is the kind for the resource (e.g. 'Foo' is the
   * kind for a resource 'foo')
   */
  kind: string;
  /**
   * @member {string} name name is the plural name of the resource.
   */
  name: string;
  /**
   * @member {boolean} namespaced namespaced indicates if a resource is
   * namespaced or not.
   */
  namespaced: boolean;
  /**
   * @member {string[]} [shortNames] shortNames is a list of suggested short
   * names of the resource.
   */
  shortNames?: string[];
  /**
   * @member {string} singularName singularName is the singular name of the
   * resource.  This allows clients to handle plural and singular opaquely. The
   * singularName is more correct for reporting status on a single item and
   * both singular and plural are allowed from the kubectl CLI interface.
   */
  singularName: string;
  /**
   * @member {string[]} verbs verbs is a list of supported kube verbs (this
   * includes get, list, watch, create, update, patch, delete,
   * deletecollection, and proxy)
   */
  verbs: string[];
  /**
   * @member {string} [version] version is the preferred version of the
   * resource.  Empty implies the version of the containing resource list For
   * subresources, this may have a different value, for example: v1 (while
   * inside a v1beta1 version of the core resource's group)".
   */
  version?: string;
}

/**
 * @interface
 * An interface representing V1APIResourceList.
 * APIResourceList is a list of APIResource, it is used to expose the name of
 * the resources supported in a specific group and version, and if the resource
 * is namespaced.
 *
 */
export interface V1APIResourceList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} groupVersion groupVersion is the group and version this
   * APIResourceList is for.
   */
  groupVersion: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1APIResource[]} resources resources contains the name of the
   * resources and if they are namespaced.
   */
  resources: V1APIResource[];
}

/**
 * @interface
 * An interface representing V1NodeSelectorRequirement.
 * A node selector requirement is a selector that contains values, a key, and
 * an operator that relates the key and values.
 *
 */
export interface V1NodeSelectorRequirement {
  /**
   * @member {string} key The label key that the selector applies to.
   */
  key: string;
  /**
   * @member {string} operator Represents a key's relationship to a set of
   * values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   */
  operator: string;
  /**
   * @member {string[]} [values] An array of string values. If the operator is
   * In or NotIn, the values array must be non-empty. If the operator is Exists
   * or DoesNotExist, the values array must be empty. If the operator is Gt or
   * Lt, the values array must have a single element, which will be interpreted
   * as an integer. This array is replaced during a strategic merge patch.
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing V1NodeSelectorTerm.
 * A null or empty node selector term matches no objects. The requirements of
 * them are ANDed. The TopologySelectorTerm type implements a subset of the
 * NodeSelectorTerm.
 *
 */
export interface V1NodeSelectorTerm {
  /**
   * @member {V1NodeSelectorRequirement[]} [matchExpressions] A list of node
   * selector requirements by node's labels.
   */
  matchExpressions?: V1NodeSelectorRequirement[];
  /**
   * @member {V1NodeSelectorRequirement[]} [matchFields] A list of node
   * selector requirements by node's fields.
   */
  matchFields?: V1NodeSelectorRequirement[];
}

/**
 * @interface
 * An interface representing V1PreferredSchedulingTerm.
 * An empty preferred scheduling term matches all objects with implicit weight
 * 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects
 * (i.e. is also a no-op).
 *
 */
export interface V1PreferredSchedulingTerm {
  /**
   * @member {V1NodeSelectorTerm} preference A node selector term, associated
   * with the corresponding weight.
   */
  preference: V1NodeSelectorTerm;
  /**
   * @member {number} weight Weight associated with matching the corresponding
   * nodeSelectorTerm, in the range 1-100.
   */
  weight: number;
}

/**
 * @interface
 * An interface representing V1NodeSelector.
 * A node selector represents the union of the results of one or more label
 * queries over a set of nodes; that is, it represents the OR of the selectors
 * represented by the node selector terms.
 *
 */
export interface V1NodeSelector {
  /**
   * @member {V1NodeSelectorTerm[]} nodeSelectorTerms Required. A list of node
   * selector terms. The terms are ORed.
   */
  nodeSelectorTerms: V1NodeSelectorTerm[];
}

/**
 * @interface
 * An interface representing V1NodeAffinity.
 * Node affinity is a group of node affinity scheduling rules.
 *
 */
export interface V1NodeAffinity {
  /**
   * @member {V1PreferredSchedulingTerm[]}
   * [preferredDuringSchedulingIgnoredDuringExecution] The scheduler will
   * prefer to schedule pods to nodes that satisfy the affinity expressions
   * specified by this field, but it may choose a node that violates one or
   * more of the expressions. The node that is most preferred is the one with
   * the greatest sum of weights, i.e. for each node that meets all of the
   * scheduling requirements (resource request, requiredDuringScheduling
   * affinity expressions, etc.), compute a sum by iterating through the
   * elements of this field and adding "weight" to the sum if the node matches
   * the corresponding matchExpressions; the node(s) with the highest sum are
   * the most preferred.
   */
  preferredDuringSchedulingIgnoredDuringExecution?: V1PreferredSchedulingTerm[];
  /**
   * @member {V1NodeSelector} [requiredDuringSchedulingIgnoredDuringExecution]
   * If the affinity requirements specified by this field are not met at
   * scheduling time, the pod will not be scheduled onto the node. If the
   * affinity requirements specified by this field cease to be met at some
   * point during pod execution (e.g. due to an update), the system may or may
   * not try to eventually evict the pod from its node.
   */
  requiredDuringSchedulingIgnoredDuringExecution?: V1NodeSelector;
}

/**
 * @interface
 * An interface representing V1LabelSelectorRequirement.
 * A label selector requirement is a selector that contains values, a key, and
 * an operator that relates the key and values.
 *
 */
export interface V1LabelSelectorRequirement {
  /**
   * @member {string} key key is the label key that the selector applies to.
   */
  key: string;
  /**
   * @member {string} operator operator represents a key's relationship to a
   * set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   */
  operator: string;
  /**
   * @member {string[]} [values] values is an array of string values. If the
   * operator is In or NotIn, the values array must be non-empty. If the
   * operator is Exists or DoesNotExist, the values array must be empty. This
   * array is replaced during a strategic merge patch.
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing V1LabelSelector.
 * A label selector is a label query over a set of resources. The result of
 * matchLabels and matchExpressions are ANDed. An empty label selector matches
 * all objects. A null label selector matches no objects.
 *
 */
export interface V1LabelSelector {
  /**
   * @member {V1LabelSelectorRequirement[]} [matchExpressions] matchExpressions
   * is a list of label selector requirements. The requirements are ANDed.
   */
  matchExpressions?: V1LabelSelectorRequirement[];
  /**
   * @member {any} [matchLabels] matchLabels is a map of {key,value} pairs. A
   * single {key,value} in the matchLabels map is equivalent to an element of
   * matchExpressions, whose key field is "key", the operator is "In", and the
   * values array contains only "value". The requirements are ANDed.
   */
  matchLabels?: any;
}

/**
 * @interface
 * An interface representing V1PodAffinityTerm.
 * Defines a set of pods (namely those matching the labelSelector relative to
 * the given namespace(s)) that this pod should be co-located (affinity) or not
 * co-located (anti-affinity) with, where co-located is defined as running on a
 * node whose value of the label with key <topologyKey> matches that of any
 * node on which a pod of the set of pods is running
 *
 */
export interface V1PodAffinityTerm {
  /**
   * @member {V1LabelSelector} [labelSelector] A label query over a set of
   * resources, in this case pods.
   */
  labelSelector?: V1LabelSelector;
  /**
   * @member {string[]} [namespaces] namespaces specifies which namespaces the
   * labelSelector applies to (matches against); null or empty list means "this
   * pod's namespace"
   */
  namespaces?: string[];
  /**
   * @member {string} topologyKey This pod should be co-located (affinity) or
   * not co-located (anti-affinity) with the pods matching the labelSelector in
   * the specified namespaces, where co-located is defined as running on a node
   * whose value of the label with key topologyKey matches that of any node on
   * which any of the selected pods is running. Empty topologyKey is not
   * allowed.
   */
  topologyKey: string;
}

/**
 * @interface
 * An interface representing V1WeightedPodAffinityTerm.
 * The weights of all of the matched WeightedPodAffinityTerm fields are added
 * per-node to find the most preferred node(s)
 *
 */
export interface V1WeightedPodAffinityTerm {
  /**
   * @member {V1PodAffinityTerm} podAffinityTerm Required. A pod affinity term,
   * associated with the corresponding weight.
   */
  podAffinityTerm: V1PodAffinityTerm;
  /**
   * @member {number} weight weight associated with matching the corresponding
   * podAffinityTerm, in the range 1-100.
   */
  weight: number;
}

/**
 * @interface
 * An interface representing V1PodAffinity.
 * Pod affinity is a group of inter pod affinity scheduling rules.
 *
 */
export interface V1PodAffinity {
  /**
   * @member {V1WeightedPodAffinityTerm[]}
   * [preferredDuringSchedulingIgnoredDuringExecution] The scheduler will
   * prefer to schedule pods to nodes that satisfy the affinity expressions
   * specified by this field, but it may choose a node that violates one or
   * more of the expressions. The node that is most preferred is the one with
   * the greatest sum of weights, i.e. for each node that meets all of the
   * scheduling requirements (resource request, requiredDuringScheduling
   * affinity expressions, etc.), compute a sum by iterating through the
   * elements of this field and adding "weight" to the sum if the node has pods
   * which matches the corresponding podAffinityTerm; the node(s) with the
   * highest sum are the most preferred.
   */
  preferredDuringSchedulingIgnoredDuringExecution?: V1WeightedPodAffinityTerm[];
  /**
   * @member {V1PodAffinityTerm[]}
   * [requiredDuringSchedulingIgnoredDuringExecution] If the affinity
   * requirements specified by this field are not met at scheduling time, the
   * pod will not be scheduled onto the node. If the affinity requirements
   * specified by this field cease to be met at some point during pod execution
   * (e.g. due to a pod label update), the system may or may not try to
   * eventually evict the pod from its node. When there are multiple elements,
   * the lists of nodes corresponding to each podAffinityTerm are intersected,
   * i.e. all terms must be satisfied.
   */
  requiredDuringSchedulingIgnoredDuringExecution?: V1PodAffinityTerm[];
}

/**
 * @interface
 * An interface representing V1PodAntiAffinity.
 * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
 *
 */
export interface V1PodAntiAffinity {
  /**
   * @member {V1WeightedPodAffinityTerm[]}
   * [preferredDuringSchedulingIgnoredDuringExecution] The scheduler will
   * prefer to schedule pods to nodes that satisfy the anti-affinity
   * expressions specified by this field, but it may choose a node that
   * violates one or more of the expressions. The node that is most preferred
   * is the one with the greatest sum of weights, i.e. for each node that meets
   * all of the scheduling requirements (resource request,
   * requiredDuringScheduling anti-affinity expressions, etc.), compute a sum
   * by iterating through the elements of this field and adding "weight" to the
   * sum if the node has pods which matches the corresponding podAffinityTerm;
   * the node(s) with the highest sum are the most preferred.
   */
  preferredDuringSchedulingIgnoredDuringExecution?: V1WeightedPodAffinityTerm[];
  /**
   * @member {V1PodAffinityTerm[]}
   * [requiredDuringSchedulingIgnoredDuringExecution] If the anti-affinity
   * requirements specified by this field are not met at scheduling time, the
   * pod will not be scheduled onto the node. If the anti-affinity requirements
   * specified by this field cease to be met at some point during pod execution
   * (e.g. due to a pod label update), the system may or may not try to
   * eventually evict the pod from its node. When there are multiple elements,
   * the lists of nodes corresponding to each podAffinityTerm are intersected,
   * i.e. all terms must be satisfied.
   */
  requiredDuringSchedulingIgnoredDuringExecution?: V1PodAffinityTerm[];
}

/**
 * @interface
 * An interface representing V1Affinity.
 * Affinity is a group of affinity scheduling rules.
 *
 */
export interface V1Affinity {
  /**
   * @member {V1NodeAffinity} [nodeAffinity] Describes node affinity scheduling
   * rules for the pod.
   */
  nodeAffinity?: V1NodeAffinity;
  /**
   * @member {V1PodAffinity} [podAffinity] Describes pod affinity scheduling
   * rules (e.g. co-locate this pod in the same node, zone, etc. as some other
   * pod(s)).
   */
  podAffinity?: V1PodAffinity;
  /**
   * @member {V1PodAntiAffinity} [podAntiAffinity] Describes pod anti-affinity
   * scheduling rules (e.g. avoid putting this pod in the same node, zone, etc.
   * as some other pod(s)).
   */
  podAntiAffinity?: V1PodAntiAffinity;
}

/**
 * @interface
 * An interface representing V1Bootloader.
 * Represents the firmware blob used to assist in the domain creation process.
 * Used for setting the QEMU BIOS file path for the libvirt domain.
 *
 */
export interface V1Bootloader {
  /**
   * @member {any} [bios] If set (default), BIOS will be used.
   * +optional
   */
  bios?: any;
  /**
   * @member {any} [efi] If set, EFI will be used instead of BIOS.
   * +optional
   */
  efi?: any;
}

/**
 * @interface
 * An interface representing V1CDRomTarget.
 */
export interface V1CDRomTarget {
  /**
   * @member {string} [bus] Bus indicates the type of disk device to emulate.
   * supported values: virtio, sata, scsi.
   */
  bus?: string;
  /**
   * @member {boolean} [readonly] ReadOnly.
   * Defaults to true.
   */
  readonly?: boolean;
  /**
   * @member {string} [tray] Tray indicates if the tray of the device is open
   * or closed.
   * Allowed values are "open" and "closed".
   * Defaults to closed.
   * +optional
   */
  tray?: string;
}

/**
 * @interface
 * An interface representing V1CPUFeature.
 * CPUFeature allows specifying a CPU feature.
 *
 */
export interface V1CPUFeature {
  /**
   * @member {string} name Name of the CPU feature
   */
  name: string;
  /**
   * @member {string} [policy] Policy is the CPU feature attribute which can
   * have the following attributes:
   * force    - The virtual CPU will claim the feature is supported regardless
   * of it being supported by host CPU.
   * require  - Guest creation will fail unless the feature is supported by the
   * host CPU or the hypervisor is able to emulate it.
   * optional - The feature will be supported by virtual CPU if and only if it
   * is supported by host CPU.
   * disable  - The feature will not be supported by virtual CPU.
   * forbid   - Guest creation will fail if the feature is supported by host
   * CPU.
   * Defaults to require
   * +optional
   */
  policy?: string;
}

/**
 * @interface
 * An interface representing V1CPU.
 * CPU allows specifying the CPU topology.
 *
 */
export interface V1CPU {
  /**
   * @member {number} [cores] Cores specifies the number of cores inside the
   * vmi.
   * Must be a value greater or equal 1.
   */
  cores?: number;
  /**
   * @member {boolean} [dedicatedCpuPlacement] DedicatedCPUPlacement requests
   * the scheduler to place the VirtualMachineInstance on a node
   * with enough dedicated pCPUs and pin the vCPUs to it.
   * +optional
   */
  dedicatedCpuPlacement?: boolean;
  /**
   * @member {V1CPUFeature[]} [features] Features specifies the CPU features
   * list inside the VMI.
   * +optional
   */
  features?: V1CPUFeature[];
  /**
   * @member {string} [model] Model specifies the CPU model inside the VMI.
   * List of available models
   * https://github.com/libvirt/libvirt/blob/master/src/cpu/cpu_map.xml.
   * It is possible to specify special cases like "host-passthrough" to get the
   * same CPU as the node
   * and "host-model" to get CPU closest to the node one.
   * Defaults to host-model.
   * +optional
   */
  model?: string;
  /**
   * @member {number} [sockets] Sockets specifies the number of sockets inside
   * the vmi.
   * Must be a value greater or equal 1.
   */
  sockets?: number;
  /**
   * @member {number} [threads] Threads specifies the number of threads inside
   * the vmi.
   * Must be a value greater or equal 1.
   */
  threads?: number;
}

/**
 * @interface
 * An interface representing V1HPETTimer.
 */
export interface V1HPETTimer {
  /**
   * @member {boolean} [present] Enabled set to false makes sure that the
   * machine type or a preset can't add the timer.
   * Defaults to true.
   * +optional
   */
  present?: boolean;
  /**
   * @member {string} [tickPolicy] TickPolicy determines what happens when QEMU
   * misses a deadline for injecting a tick to the guest.
   * One of "delay", "catchup", "merge", "discard".
   */
  tickPolicy?: string;
}

/**
 * @interface
 * An interface representing V1HypervTimer.
 */
export interface V1HypervTimer {
  /**
   * @member {boolean} [present] Enabled set to false makes sure that the
   * machine type or a preset can't add the timer.
   * Defaults to true.
   * +optional
   */
  present?: boolean;
}

/**
 * @interface
 * An interface representing V1KVMTimer.
 */
export interface V1KVMTimer {
  /**
   * @member {boolean} [present] Enabled set to false makes sure that the
   * machine type or a preset can't add the timer.
   * Defaults to true.
   * +optional
   */
  present?: boolean;
}

/**
 * @interface
 * An interface representing V1PITTimer.
 */
export interface V1PITTimer {
  /**
   * @member {boolean} [present] Enabled set to false makes sure that the
   * machine type or a preset can't add the timer.
   * Defaults to true.
   * +optional
   */
  present?: boolean;
  /**
   * @member {string} [tickPolicy] TickPolicy determines what happens when QEMU
   * misses a deadline for injecting a tick to the guest.
   * One of "delay", "catchup", "discard".
   */
  tickPolicy?: string;
}

/**
 * @interface
 * An interface representing V1RTCTimer.
 */
export interface V1RTCTimer {
  /**
   * @member {boolean} [present] Enabled set to false makes sure that the
   * machine type or a preset can't add the timer.
   * Defaults to true.
   * +optional
   */
  present?: boolean;
  /**
   * @member {string} [tickPolicy] TickPolicy determines what happens when QEMU
   * misses a deadline for injecting a tick to the guest.
   * One of "delay", "catchup".
   */
  tickPolicy?: string;
  /**
   * @member {string} [track] Track the guest or the wall clock.
   */
  track?: string;
}

/**
 * @interface
 * An interface representing V1Timer.
 * Represents all available timers in a vmi.
 *
 */
export interface V1Timer {
  /**
   * @member {V1HPETTimer} [hpet] HPET (High Precision Event Timer) - multiple
   * timers with periodic interrupts.
   */
  hpet?: V1HPETTimer;
  /**
   * @member {V1HypervTimer} [hyperv] Hyperv (Hypervclock) - lets guests read
   * the host’s wall clock time (paravirtualized). For windows guests.
   */
  hyperv?: V1HypervTimer;
  /**
   * @member {V1KVMTimer} [kvm] KVM 	(KVM clock) - lets guests read the host’s
   * wall clock time (paravirtualized). For linux guests.
   */
  kvm?: V1KVMTimer;
  /**
   * @member {V1PITTimer} [pit] PIT (Programmable Interval Timer) - a timer
   * with periodic interrupts.
   */
  pit?: V1PITTimer;
  /**
   * @member {V1RTCTimer} [rtc] RTC (Real Time Clock) - a continuously running
   * timer with periodic interrupts.
   */
  rtc?: V1RTCTimer;
}

/**
 * @interface
 * An interface representing V1ClockOffsetUTC.
 * UTC sets the guest clock to UTC on each boot.
 *
 */
export interface V1ClockOffsetUTC {
  /**
   * @member {number} [offsetSeconds] OffsetSeconds specifies an offset in
   * seconds, relative to UTC. If set,
   * guest changes to the clock will be kept during reboots and not reset.
   */
  offsetSeconds?: number;
}

/**
 * @interface
 * An interface representing V1Clock.
 * Represents the clock and timers of a vmi.
 *
 */
export interface V1Clock {
  /**
   * @member {V1Timer} timer Timer specifies whih timers are attached to the
   * vmi.
   */
  timer: V1Timer;
  /**
   * @member {any} [timezone] Timezone sets the guest clock to the specified
   * timezone.
   * Zone name follows the TZ environment variable format (e.g.
   * 'America/New_York').
   */
  timezone?: any;
  /**
   * @member {V1ClockOffsetUTC} [utc] UTC sets the guest clock to UTC on each
   * boot. If an offset is specified,
   * guest changes to the clock will be kept during reboots and are not reset.
   */
  utc?: V1ClockOffsetUTC;
}

/**
 * @interface
 * An interface representing V1LocalObjectReference.
 * LocalObjectReference contains enough information to let you locate the
 * referenced object inside the same namespace.
 *
 */
export interface V1LocalObjectReference {
  /**
   * @member {string} [name] Name of the referent. More info:
   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   */
  name?: string;
}

/**
 * @interface
 * An interface representing V1CloudInitNoCloudSource.
 * Represents a cloud-init nocloud user data source.
 * More info:
 * http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
 *
 */
export interface V1CloudInitNoCloudSource {
  /**
   * @member {string} [networkData] NetworkData contains NoCloud inline
   * cloud-init networkdata.
   * + optional
   */
  networkData?: string;
  /**
   * @member {string} [networkDataBase64] NetworkDataBase64 contains NoCloud
   * cloud-init networkdata as a base64 encoded string.
   * + optional
   */
  networkDataBase64?: string;
  /**
   * @member {V1LocalObjectReference} [networkDataSecretRef]
   * NetworkDataSecretRef references a k8s secret that contains NoCloud
   * networkdata.
   * + optional
   */
  networkDataSecretRef?: V1LocalObjectReference;
  /**
   * @member {V1LocalObjectReference} [secretRef] UserDataSecretRef references
   * a k8s secret that contains NoCloud userdata.
   * + optional
   */
  secretRef?: V1LocalObjectReference;
  /**
   * @member {string} [userData] UserData contains NoCloud inline cloud-init
   * userdata.
   * + optional
   */
  userData?: string;
  /**
   * @member {string} [userDataBase64] UserDataBase64 contains NoCloud
   * cloud-init userdata as a base64 encoded string.
   * + optional
   */
  userDataBase64?: string;
}

/**
 * @interface
 * An interface representing V1ConfigMapVolumeSource.
 * ConfigMapVolumeSource adapts a ConfigMap into a volume.
 * More info: https://kubernetes.io/docs/concepts/storage/volumes/#configmap
 *
 */
export interface V1ConfigMapVolumeSource {
  /**
   * @member {string} [name] Name of the referent. More info:
   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   */
  name?: string;
  /**
   * @member {boolean} [optional] Specify whether the ConfigMap or it's keys
   * must be defined
   * +optional
   */
  optional?: boolean;
}

/**
 * @interface
 * An interface representing V1ContainerDiskSource.
 * Represents a docker image with an embedded disk.
 *
 */
export interface V1ContainerDiskSource {
  /**
   * @member {string} image Image is the name of the image with the embedded
   * disk.
   */
  image: string;
  /**
   * @member {string} [imagePullSecret] ImagePullSecret is the name of the
   * Docker registry secret required to pull the image. The secret must already
   * exist.
   */
  imagePullSecret?: string;
  /**
   * @member {string} [path] Path defines the path to disk file in the
   * container
   */
  path?: string;
}

/**
 * @interface
 * An interface representing V1DHCPPrivateOptions.
 * DHCPExtraOptions defines Extra DHCP options for a VM.
 *
 */
export interface V1DHCPPrivateOptions {
  /**
   * @member {number} option Option is an Integer value from 224-254
   * Required.
   */
  option: number;
  /**
   * @member {string} value Value is a String value for the Option provided
   * Required.
   */
  value: string;
}

/**
 * @interface
 * An interface representing V1DHCPOptions.
 * Extra DHCP options to use in the interface.
 *
 */
export interface V1DHCPOptions {
  /**
   * @member {string} [bootFileName] If specified will pass option 67 to
   * interface's DHCP server
   * +optional
   */
  bootFileName?: string;
  /**
   * @member {string[]} [ntpServers] If specified will pass the configured NTP
   * server to the VM via DHCP option 042.
   * +optional
   */
  ntpServers?: string[];
  /**
   * @member {V1DHCPPrivateOptions[]} [privateOptions] If specified will pass
   * extra DHCP options for private use, range: 224-254
   * +optional
   */
  privateOptions?: V1DHCPPrivateOptions[];
  /**
   * @member {string} [tftpServerName] If specified will pass option 66 to
   * interface's DHCP server
   * +optional
   */
  tftpServerName?: string;
}

/**
 * @interface
 * An interface representing V1DataVolumeSource.
 */
export interface V1DataVolumeSource {
  /**
   * @member {string} name Name represents the name of the DataVolume in the
   * same namespace
   */
  name: string;
}

/**
 * @interface
 * An interface representing V1Preconditions.
 * Preconditions must be fulfilled before an operation (update, delete, etc.)
 * is carried out.
 *
 */
export interface V1Preconditions {
  /**
   * @member {any} [uid] Specifies the target UID.
   */
  uid?: any;
}

/**
 * @interface
 * An interface representing V1DeleteOptions.
 * DeleteOptions may be provided when deleting an API object.
 *
 */
export interface V1DeleteOptions {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string[]} [dryRun] When present, indicates that modifications
   * should not be persisted. An invalid or unrecognized dryRun directive will
   * result in an error response and no further processing of the request.
   * Valid values are: - All: all dry run stages will be processed
   */
  dryRun?: string[];
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {V1Preconditions} [preconditions] Must be fulfilled before a
   * deletion is carried out. If not possible, a 409 Conflict status will be
   * returned.
   */
  preconditions?: V1Preconditions;
  /**
   * @member {any} [propagationPolicy] Whether and how garbage collection will
   * be performed. Either this field or OrphanDependents may be set, but not
   * both. The default policy is decided by the existing finalizer set in the
   * metadata.finalizers and the resource-specific default policy. Acceptable
   * values are: 'Orphan' - orphan the dependents; 'Background' - allow the
   * garbage collector to delete the dependents in the background; 'Foreground'
   * - a cascading policy that deletes all dependents in the foreground.
   */
  propagationPolicy?: any;
}

/**
 * @interface
 * An interface representing V1DiskTarget.
 */
export interface V1DiskTarget {
  /**
   * @member {string} [bus] Bus indicates the type of disk device to emulate.
   * supported values: virtio, sata, scsi.
   */
  bus?: string;
  /**
   * @member {string} [pciAddress] If specified, the virtual disk will be
   * placed on the guests pci address with the specifed PCI address. For
   * example: 0000:81:01.10
   * +optional
   */
  pciAddress?: string;
  /**
   * @member {boolean} [readonly] ReadOnly.
   * Defaults to false.
   */
  readonly?: boolean;
}

/**
 * @interface
 * An interface representing V1FloppyTarget.
 */
export interface V1FloppyTarget {
  /**
   * @member {boolean} [readonly] ReadOnly.
   * Defaults to false.
   */
  readonly?: boolean;
  /**
   * @member {string} [tray] Tray indicates if the tray of the device is open
   * or closed.
   * Allowed values are "open" and "closed".
   * Defaults to closed.
   * +optional
   */
  tray?: string;
}

/**
 * @interface
 * An interface representing V1LunTarget.
 */
export interface V1LunTarget {
  /**
   * @member {string} [bus] Bus indicates the type of disk device to emulate.
   * supported values: virtio, sata, scsi.
   */
  bus?: string;
  /**
   * @member {boolean} [readonly] ReadOnly.
   * Defaults to false.
   */
  readonly?: boolean;
}

/**
 * @interface
 * An interface representing V1Disk.
 */
export interface V1Disk {
  /**
   * @member {number} [bootOrder] BootOrder is an integer value > 0, used to
   * determine ordering of boot devices.
   * Lower values take precedence.
   * Each disk or interface that has a boot order must have a unique value.
   * Disks without a boot order are not tried if a disk with a boot order
   * exists.
   * +optional
   */
  bootOrder?: number;
  /**
   * @member {string} [cache] Cache specifies which kvm disk cache mode should
   * be used.
   * +optional
   */
  cache?: string;
  /**
   * @member {V1CDRomTarget} [cdrom] Attach a volume as a cdrom to the vmi.
   */
  cdrom?: V1CDRomTarget;
  /**
   * @member {boolean} [dedicatedIOThread] dedicatedIOThread indicates this
   * disk should have an exclusive IO Thread.
   * Enabling this implies useIOThreads = true.
   * Defaults to false.
   * +optional
   */
  dedicatedIOThread?: boolean;
  /**
   * @member {V1DiskTarget} [disk] Attach a volume as a disk to the vmi.
   */
  disk?: V1DiskTarget;
  /**
   * @member {V1FloppyTarget} [floppy] Attach a volume as a floppy to the vmi.
   */
  floppy?: V1FloppyTarget;
  /**
   * @member {V1LunTarget} [lun] Attach a volume as a LUN to the vmi.
   */
  lun?: V1LunTarget;
  /**
   * @member {string} name Name is the device name
   */
  name: string;
  /**
   * @member {string} [serial] Serial provides the ability to specify a serial
   * number for the disk device.
   * +optional
   */
  serial?: string;
}

/**
 * @interface
 * An interface representing V1Input.
 */
export interface V1Input {
  /**
   * @member {string} [bus] Bus indicates the bus of input device to emulate.
   * Supported values: virtio, usb.
   */
  bus?: string;
  /**
   * @member {string} name Name is the device name
   */
  name: string;
  /**
   * @member {string} type Type indicated the type of input device.
   * Supported values: tablet.
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1Port.
 * Port repesents a port to expose from the virtual machine.
 * Default protocol TCP.
 * The port field is mandatory
 *
 */
export interface V1Port {
  /**
   * @member {string} [name] If specified, this must be an IANA_SVC_NAME and
   * unique within the pod. Each
   * named port in a pod must have a unique name. Name for the port that can be
   * referred to by services.
   * +optional
   */
  name?: string;
  /**
   * @member {number} port Number of port to expose for the virtual machine.
   * This must be a valid port number, 0 < x < 65536.
   */
  port: number;
  /**
   * @member {string} [protocol] Protocol for port. Must be UDP or TCP.
   * Defaults to "TCP".
   * +optional
   */
  protocol?: string;
}

/**
 * @interface
 * An interface representing V1Interface.
 */
export interface V1Interface {
  /**
   * @member {number} [bootOrder] BootOrder is an integer value > 0, used to
   * determine ordering of boot devices.
   * Lower values take precedence.
   * Each interface or disk that has a boot order must have a unique value.
   * Interfaces without a boot order are not tried.
   * +optional
   */
  bootOrder?: number;
  /**
   * @member {any} [bridge]
   */
  bridge?: any;
  /**
   * @member {V1DHCPOptions} [dhcpOptions] If specified the network interface
   * will pass additional DHCP options to the VMI
   * +optional
   */
  dhcpOptions?: V1DHCPOptions;
  /**
   * @member {string} [macAddress] Interface MAC address. For example:
   * de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
   */
  macAddress?: string;
  /**
   * @member {any} [masquerade]
   */
  masquerade?: any;
  /**
   * @member {string} [model] Interface model.
   * One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio.
   * Defaults to virtio.
   */
  model?: string;
  /**
   * @member {string} name Logical name of the interface as well as a reference
   * to the associated networks.
   * Must match the Name of a Network.
   */
  name: string;
  /**
   * @member {string} [pciAddress] If specified, the virtual network interface
   * will be placed on the guests pci address with the specifed PCI address.
   * For example: 0000:81:01.10
   * +optional
   */
  pciAddress?: string;
  /**
   * @member {V1Port[]} [ports] List of ports to be forwarded to the virtual
   * machine.
   */
  ports?: V1Port[];
  /**
   * @member {any} [slirp]
   */
  slirp?: any;
  /**
   * @member {any} [sriov]
   */
  sriov?: any;
}

/**
 * @interface
 * An interface representing V1I6300ESBWatchdog.
 * i6300esb watchdog device.
 *
 */
export interface V1I6300ESBWatchdog {
  /**
   * @member {string} [action] The action to take. Valid values are poweroff,
   * reset, shutdown.
   * Defaults to reset.
   */
  action?: string;
}

/**
 * @interface
 * An interface representing V1Watchdog.
 * Named watchdog device.
 *
 */
export interface V1Watchdog {
  /**
   * @member {V1I6300ESBWatchdog} [i6300esb] i6300esb watchdog device.
   * +optional
   */
  i6300esb?: V1I6300ESBWatchdog;
  /**
   * @member {string} name Name of the watchdog.
   */
  name: string;
}

/**
 * @interface
 * An interface representing V1Devices.
 */
export interface V1Devices {
  /**
   * @member {boolean} [autoattachGraphicsDevice] Whether to attach the default
   * graphics device or not.
   * VNC will not be available if set to false. Defaults to true.
   */
  autoattachGraphicsDevice?: boolean;
  /**
   * @member {boolean} [autoattachPodInterface] Whether to attach a pod network
   * interface. Defaults to true.
   */
  autoattachPodInterface?: boolean;
  /**
   * @member {boolean} [blockMultiQueue] Whether or not to enable virtio
   * multi-queue for block devices
   * +optional
   */
  blockMultiQueue?: boolean;
  /**
   * @member {V1Disk[]} [disks] Disks describes disks, cdroms, floppy and luns
   * which are connected to the vmi.
   */
  disks?: V1Disk[];
  /**
   * @member {V1Input[]} [inputs] Inputs describe input devices
   */
  inputs?: V1Input[];
  /**
   * @member {V1Interface[]} [interfaces] Interfaces describe network
   * interfaces which are added to the vmi.
   */
  interfaces?: V1Interface[];
  /**
   * @member {boolean} [networkInterfaceMultiqueue] If specified, virtual
   * network interfaces configured with a virtio bus will also enable the vhost
   * multiqueue feature
   * +optional
   */
  networkInterfaceMultiqueue?: boolean;
  /**
   * @member {any} [rng] Whether to have random number generator from host
   * +optional
   */
  rng?: any;
  /**
   * @member {V1Watchdog} [watchdog] Watchdog describes a watchdog device which
   * can be added to the vmi.
   */
  watchdog?: V1Watchdog;
}

/**
 * @interface
 * An interface representing V1FeatureState.
 * Represents if a feature is enabled or disabled.
 *
 */
export interface V1FeatureState {
  /**
   * @member {boolean} [enabled] Enabled determines if the feature should be
   * enabled or disabled on the guest.
   * Defaults to true.
   * +optional
   */
  enabled?: boolean;
}

/**
 * @interface
 * An interface representing V1FeatureAPIC.
 */
export interface V1FeatureAPIC {
  /**
   * @member {boolean} [enabled] Enabled determines if the feature should be
   * enabled or disabled on the guest.
   * Defaults to true.
   * +optional
   */
  enabled?: boolean;
  /**
   * @member {boolean} [endOfInterrupt] EndOfInterrupt enables the end of
   * interrupt notification in the guest.
   * Defaults to false.
   * +optional
   */
  endOfInterrupt?: boolean;
}

/**
 * @interface
 * An interface representing V1FeatureSpinlocks.
 */
export interface V1FeatureSpinlocks {
  /**
   * @member {boolean} [enabled] Enabled determines if the feature should be
   * enabled or disabled on the guest.
   * Defaults to true.
   * +optional
   */
  enabled?: boolean;
  /**
   * @member {number} [spinlocks] Retries indicates the number of retries.
   * Must be a value greater or equal 4096.
   * Defaults to 4096.
   * +optional
   */
  spinlocks?: number;
}

/**
 * @interface
 * An interface representing V1FeatureVendorID.
 */
export interface V1FeatureVendorID {
  /**
   * @member {boolean} [enabled] Enabled determines if the feature should be
   * enabled or disabled on the guest.
   * Defaults to true.
   * +optional
   */
  enabled?: boolean;
  /**
   * @member {string} [vendorid] VendorID sets the hypervisor vendor id,
   * visible to the vmi.
   * String up to twelve characters.
   */
  vendorid?: string;
}

/**
 * @interface
 * An interface representing V1FeatureHyperv.
 * Hyperv specific features.
 *
 */
export interface V1FeatureHyperv {
  /**
   * @member {V1FeatureState} [evmcs] EVMCS Speeds up L2 vmexits, but disables
   * other virtualization features. Requires vapic.
   * Defaults to the machine type setting.
   * +optional
   */
  evmcs?: V1FeatureState;
  /**
   * @member {V1FeatureState} [frequencies] Frequencies improve Hyper-V on KVM
   * (TSC clock source).
   * Defaults to the machine type setting.
   * +optional
   */
  frequencies?: V1FeatureState;
  /**
   * @member {V1FeatureState} [ipi] IPI improves performances in overcommited
   * environments. Requires vpindex.
   * Defaults to the machine type setting.
   * +optional
   */
  ipi?: V1FeatureState;
  /**
   * @member {V1FeatureState} [reenlightenment] Reenlightenment improve Hyper-V
   * on KVM (TSC clock source).
   * Defaults to the machine type setting.
   * +optional
   */
  reenlightenment?: V1FeatureState;
  /**
   * @member {V1FeatureState} [relaxed] Relaxed relaxes constraints on timer.
   * Defaults to the machine type setting.
   * +optional
   */
  relaxed?: V1FeatureState;
  /**
   * @member {V1FeatureState} [reset] Reset enables Hyperv reboot/reset for the
   * vmi. Requires synic.
   * Defaults to the machine type setting.
   * +optional
   */
  reset?: V1FeatureState;
  /**
   * @member {V1FeatureState} [runtime] Runtime.
   * Defaults to the machine type setting.
   * +optional
   */
  runtime?: V1FeatureState;
  /**
   * @member {V1FeatureSpinlocks} [spinlocks] Spinlocks indicates if spinlocks
   * should be made available to the guest.
   * +optional
   */
  spinlocks?: V1FeatureSpinlocks;
  /**
   * @member {V1FeatureState} [synic] SyNIC enable Synthetic Interrupt
   * Controller.
   * Defaults to the machine type setting.
   * +optional
   */
  synic?: V1FeatureState;
  /**
   * @member {V1FeatureState} [synictimer] SyNICTimer enable Synthetic
   * Interrupt Controller timer.
   * Defaults to the machine type setting.
   * +optional
   */
  synictimer?: V1FeatureState;
  /**
   * @member {V1FeatureState} [tlbflush] TLBFlush improves performances in
   * overcommited environments. Requires vpindex.
   * Defaults to the machine type setting.
   * +optional
   */
  tlbflush?: V1FeatureState;
  /**
   * @member {V1FeatureState} [vapic] VAPIC indicates whether virtual APIC is
   * enabled.
   * Defaults to the machine type setting.
   * +optional
   */
  vapic?: V1FeatureState;
  /**
   * @member {V1FeatureVendorID} [vendorid] VendorID allows setting the
   * hypervisor vendor id.
   * Defaults to the machine type setting.
   * +optional
   */
  vendorid?: V1FeatureVendorID;
  /**
   * @member {V1FeatureState} [vpindex] VPIndex enables the Virtual Processor
   * Index to help windows identifying virtual processors.
   * Defaults to the machine type setting.
   * +optional
   */
  vpindex?: V1FeatureState;
}

/**
 * @interface
 * An interface representing V1Features.
 */
export interface V1Features {
  /**
   * @member {V1FeatureState} [acpi] ACPI enables/disables ACPI insidejsondata
   * guest.
   * Defaults to enabled.
   * +optional
   */
  acpi?: V1FeatureState;
  /**
   * @member {V1FeatureAPIC} [apic] Defaults to the machine type setting.
   * +optional
   */
  apic?: V1FeatureAPIC;
  /**
   * @member {V1FeatureHyperv} [hyperv] Defaults to the machine type setting.
   * +optional
   */
  hyperv?: V1FeatureHyperv;
  /**
   * @member {V1FeatureState} [smm] SMM enables/disables System Management
   * Mode.
   * TSEG not yet implemented.
   * +optional
   */
  smm?: V1FeatureState;
}

/**
 * @interface
 * An interface representing V1Firmware.
 */
export interface V1Firmware {
  /**
   * @member {V1Bootloader} [bootloader] Settings to control the bootloader
   * that is used.
   * +optional
   */
  bootloader?: V1Bootloader;
  /**
   * @member {string} [serial] The system-serial-number in SMBIOS
   */
  serial?: string;
  /**
   * @member {string} [uuid] UUID reported by the vmi bios.
   * Defaults to a random generated uid.
   */
  uuid?: string;
}

/**
 * @interface
 * An interface representing V1Machine.
 */
export interface V1Machine {
  /**
   * @member {string} type QEMU machine type is the actual chipset of the
   * VirtualMachineInstance.
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1Hugepages.
 * Hugepages allow to use hugepages for the VirtualMachineInstance instead of
 * regular memory.
 *
 */
export interface V1Hugepages {
  /**
   * @member {string} [pageSize] PageSize specifies the hugepage size, for
   * x86_64 architecture valid values are 1Gi and 2Mi.
   */
  pageSize?: string;
}

/**
 * @interface
 * An interface representing V1Memory.
 * Memory allows specifying the VirtualMachineInstance memory features.
 *
 */
export interface V1Memory {
  /**
   * @member {string} [guest] Guest allows to specifying the amount of memory
   * which is visible inside the Guest OS.
   * The Guest must lie between Requests and Limits from the resources section.
   * Defaults to the requested memory in the resources section if not
   * specified.
   * + optional
   */
  guest?: string;
  /**
   * @member {V1Hugepages} [hugepages] Hugepages allow to use hugepages for the
   * VirtualMachineInstance instead of regular memory.
   * +optional
   */
  hugepages?: V1Hugepages;
}

/**
 * @interface
 * An interface representing V1ResourceRequirements.
 */
export interface V1ResourceRequirements {
  /**
   * @member {any} [limits] Limits describes the maximum amount of compute
   * resources allowed.
   * Valid resource keys are "memory" and "cpu".
   * +optional
   */
  limits?: any;
  /**
   * @member {boolean} [overcommitGuestOverhead] Don't ask the scheduler to
   * take the guest-management overhead into account. Instead
   * put the overhead only into the requested memory limits. This can lead to
   * crashes if
   * all memory is in use on a node. Defaults to false.
   */
  overcommitGuestOverhead?: boolean;
  /**
   * @member {any} [requests] Requests is a description of the initial vmi
   * resources.
   * Valid resource keys are "memory" and "cpu".
   * +optional
   */
  requests?: any;
}

/**
 * @interface
 * An interface representing V1DomainSpec.
 */
export interface V1DomainSpec {
  /**
   * @member {V1Clock} [clock] Clock sets the clock and timers of the vmi.
   * +optional
   */
  clock?: V1Clock;
  /**
   * @member {V1CPU} [cpu] CPU allow specified the detailed CPU topology inside
   * the vmi.
   * +optional
   */
  cpu?: V1CPU;
  /**
   * @member {V1Devices} devices Devices allows adding disks, network
   * interfaces, ...
   */
  devices: V1Devices;
  /**
   * @member {V1Features} [features] Features like acpi, apic, hyperv, smm.
   * +optional
   */
  features?: V1Features;
  /**
   * @member {V1Firmware} [firmware] Firmware.
   * +optional
   */
  firmware?: V1Firmware;
  /**
   * @member {any} [ioThreadsPolicy] Controls whether or not disks will share
   * IOThreads.
   * Omitting IOThreadsPolicy disables use of IOThreads.
   * One of: shared, auto
   * +optional
   */
  ioThreadsPolicy?: any;
  /**
   * @member {V1Machine} [machine] Machine type.
   * +optional
   */
  machine?: V1Machine;
  /**
   * @member {V1Memory} [memory] Memory allow specifying the VMI memory
   * features.
   * +optional
   */
  memory?: V1Memory;
  /**
   * @member {V1ResourceRequirements} [resources] Resources describes the
   * Compute Resources required by this vmi.
   */
  resources?: V1ResourceRequirements;
}

/**
 * @interface
 * An interface representing V1EmptyDiskSource.
 * EmptyDisk represents a temporary disk which shares the vmis lifecycle.
 *
 */
export interface V1EmptyDiskSource {
  /**
   * @member {string} capacity Capacity of the sparse disk.
   */
  capacity: string;
}

/**
 * @interface
 * An interface representing V1PersistentVolumeClaimVolumeSource.
 * PersistentVolumeClaimVolumeSource references the user's PVC in the same
 * namespace. This volume finds the bound PV and mounts that volume for the
 * pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around
 * another type of volume that is owned by someone else (the system).
 *
 */
export interface V1PersistentVolumeClaimVolumeSource {
  /**
   * @member {string} claimName ClaimName is the name of a
   * PersistentVolumeClaim in the same namespace as the pod using this volume.
   * More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   */
  claimName: string;
  /**
   * @member {boolean} [readOnly] Will force the ReadOnly setting in
   * VolumeMounts. Default false.
   */
  readOnly?: boolean;
}

/**
 * @interface
 * An interface representing V1EphemeralVolumeSource.
 */
export interface V1EphemeralVolumeSource {
  /**
   * @member {V1PersistentVolumeClaimVolumeSource} [persistentVolumeClaim]
   * PersistentVolumeClaimVolumeSource represents a reference to a
   * PersistentVolumeClaim in the same namespace.
   * Directly attached to the vmi via qemu.
   * More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   * +optional
   */
  persistentVolumeClaim?: V1PersistentVolumeClaimVolumeSource;
}

/**
 * @interface
 * An interface representing V1GenieNetwork.
 * Represents the genie cni network.
 *
 */
export interface V1GenieNetwork {
  /**
   * @member {string} networkName References the CNI plugin name.
   */
  networkName: string;
}

/**
 * @interface
 * An interface representing V1HTTPHeader.
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 */
export interface V1HTTPHeader {
  /**
   * @member {string} name The header field name
   */
  name: string;
  /**
   * @member {string} value The header field value
   */
  value: string;
}

/**
 * @interface
 * An interface representing V1HTTPGetAction.
 * HTTPGetAction describes an action based on HTTP Get requests.
 *
 */
export interface V1HTTPGetAction {
  /**
   * @member {string} [host] Host name to connect to, defaults to the pod IP.
   * You probably want to set "Host" in httpHeaders instead.
   */
  host?: string;
  /**
   * @member {V1HTTPHeader[]} [httpHeaders] Custom headers to set in the
   * request. HTTP allows repeated headers.
   */
  httpHeaders?: V1HTTPHeader[];
  /**
   * @member {string} [path] Path to access on the HTTP server.
   */
  path?: string;
  /**
   * @member {string} port Name or number of the port to access on the
   * container. Number must be in the range 1 to 65535. Name must be an
   * IANA_SVC_NAME.
   */
  port: string | number;
  /**
   * @member {string} [scheme] Scheme to use for connecting to the host.
   * Defaults to HTTP.
   */
  scheme?: string;
}

/**
 * @interface
 * An interface representing V1HostDisk.
 * Represents a disk created on the cluster level
 *
 */
export interface V1HostDisk {
  /**
   * @member {string} [capacity] Capacity of the sparse disk
   * +optional
   */
  capacity?: string;
  /**
   * @member {string} path The path to HostDisk image located on the cluster
   */
  path: string;
  /**
   * @member {boolean} [shared] Shared indicate whether the path is shared
   * between nodes
   */
  shared?: boolean;
  /**
   * @member {string} type Contains information if disk.img exists or should be
   * created
   * allowed options are 'Disk' and 'DiskOrCreate'
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1Initializer.
 * Initializer is information about an initializer that has not yet completed.
 *
 */
export interface V1Initializer {
  /**
   * @member {string} name name of the process that is responsible for
   * initializing this object.
   */
  name: string;
}

/**
 * @interface
 * An interface representing V1StatusCause.
 * StatusCause provides more information about an api.Status failure, including
 * cases when multiple errors are encountered.
 *
 */
export interface V1StatusCause {
  /**
   * @member {string} [field] The field of the resource that has caused this
   * error, as named by its JSON serialization. May include dot and postfix
   * notation for nested attributes. Arrays are zero-indexed.  Fields may
   * appear more than once in an array of causes due to fields having multiple
   * errors. Optional.
   *
   * Examples:
   * "name" - the field "name" on the current resource
   * "items[0].name" - the field "name" on the first array entry in "items"
   */
  field?: string;
  /**
   * @member {string} [message] A human-readable description of the cause of
   * the error.  This field may be presented as-is to a reader.
   */
  message?: string;
  /**
   * @member {string} [reason] A machine-readable description of the cause of
   * the error. If this value is empty there is no information available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing V1StatusDetails.
 * StatusDetails is a set of additional properties that MAY be set by the
 * server to provide additional information about a response. The Reason field
 * of a Status object defines what attributes will be set. Clients must ignore
 * fields that do not match the defined type of each attribute, and should
 * assume that any attribute may be empty, invalid, or under defined.
 *
 */
export interface V1StatusDetails {
  /**
   * @member {V1StatusCause[]} [causes] The Causes array includes more details
   * associated with the StatusReason failure. Not all StatusReasons may
   * provide detailed causes.
   */
  causes?: V1StatusCause[];
  /**
   * @member {string} [group] The group attribute of the resource associated
   * with the status StatusReason.
   */
  group?: string;
  /**
   * @member {string} [kind] The kind attribute of the resource associated with
   * the status StatusReason. On some operations may differ from the requested
   * resource Kind. More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {string} [name] The name attribute of the resource associated with
   * the status StatusReason (when there is a single name which can be
   * described).
   */
  name?: string;
  /**
   * @member {number} [retryAfterSeconds] If specified, the time in seconds
   * before the operation should be retried. Some errors may indicate the
   * client must take an alternate action - for those errors this field may
   * indicate how long to wait before taking the alternate action.
   */
  retryAfterSeconds?: number;
  /**
   * @member {string} [uid] UID of the resource. (when there is a single
   * resource which can be described). More info:
   * http://kubernetes.io/docs/user-guide/identifiers#uids
   */
  uid?: string;
}

/**
 * @interface
 * An interface representing V1ListMeta.
 * ListMeta describes metadata that synthetic resources must have, including
 * lists and various status objects. A resource may have only one of
 * {ObjectMeta, ListMeta}.
 *
 */
export interface V1ListMeta {
  /**
   * @member {string} [continueProperty] continue may be set if the user set a
   * limit on the number of items returned, and indicates that the server has
   * more data available. The value is opaque and may be used to issue another
   * request to the endpoint that served this list to retrieve the next set of
   * available objects. Continuing a consistent list may not be possible if the
   * server configuration has changed or more than a few minutes have passed.
   * The resourceVersion field returned when using this continue value will be
   * identical to the value in the first response, unless you have received
   * this token from an error message.
   */
  continueProperty?: string;
  /**
   * @member {string} [resourceVersion] String that identifies the server's
   * internal version of this object that can be used by clients to determine
   * when objects have changed. Value must be treated as opaque by clients and
   * passed unmodified back to the server. Populated by the system. Read-only.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
   */
  resourceVersion?: string;
  /**
   * @member {string} [selfLink] selfLink is a URL representing this object.
   * Populated by the system. Read-only.
   */
  selfLink?: string;
}

/**
 * @interface
 * An interface representing V1Status.
 * Status is a return value for calls that don't return other objects.
 *
 */
export interface V1Status {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {number} [code] Suggested HTTP return code for this status, 0 if
   * not set.
   */
  code?: number;
  /**
   * @member {V1StatusDetails} [details] Extended data associated with the
   * reason.  Each reason may define its own extended details. This field is
   * optional and the data returned is not guaranteed to conform to any schema
   * except that defined by the reason type.
   */
  details?: V1StatusDetails;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {string} [message] A human-readable description of the status of
   * this operation.
   */
  message?: string;
  /**
   * @member {V1ListMeta} [metadata] Standard list metadata. More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  metadata?: V1ListMeta;
  /**
   * @member {string} [reason] A machine-readable description of why this
   * operation is in the "Failure" status. If this value is empty there is no
   * information available. A Reason clarifies an HTTP status code but does not
   * override it.
   */
  reason?: string;
  /**
   * @member {string} [status] Status of the operation. One of: "Success" or
   * "Failure". More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
   */
  status?: string;
}

/**
 * @interface
 * An interface representing V1Initializers.
 * Initializers tracks the progress of initialization.
 *
 */
export interface V1Initializers {
  /**
   * @member {V1Initializer[]} pending Pending is a list of initializers that
   * must execute in order before this object is visible. When the last pending
   * initializer is removed, and no failing result is set, the initializers
   * struct will be set to nil and the object is considered as initialized and
   * visible to all clients.
   */
  pending: V1Initializer[];
  /**
   * @member {V1Status} [result] If result is set with the Failure field, the
   * object will be persisted to storage and then deleted, ensuring that other
   * clients can observe the deletion.
   */
  result?: V1Status;
}

/**
 * @interface
 * An interface representing V1MultusNetwork.
 * Represents the multus cni network.
 *
 */
export interface V1MultusNetwork {
  /**
   * @member {boolean} [default] Select the default network and add it to the
   * multus-cni.io/default-network annotation.
   */
  default?: boolean;
  /**
   * @member {string} networkName References to a NetworkAttachmentDefinition
   * CRD object. Format:
   * <networkName>, <namespace>/<networkName>. If namespace is not
   * specified, VMI namespace is assumed.
   */
  networkName: string;
}

/**
 * @interface
 * An interface representing V1PodNetwork.
 * Represents the stock pod network interface.
 *
 */
export interface V1PodNetwork {
  /**
   * @member {string} [vmNetworkCIDR] CIDR for vm network.
   * Default 10.0.2.0/24 if not specified.
   */
  vmNetworkCIDR?: string;
}

/**
 * @interface
 * An interface representing V1Network.
 * Network represents a network type and a resource that should be connected to
 * the vm.
 *
 */
export interface V1Network {
  /**
   * @member {V1GenieNetwork} [genie]
   */
  genie?: V1GenieNetwork;
  /**
   * @member {V1MultusNetwork} [multus]
   */
  multus?: V1MultusNetwork;
  /**
   * @member {string} name Network name.
   * Must be a DNS_LABEL and unique within the vm.
   * More info:
   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   */
  name: string;
  /**
   * @member {V1PodNetwork} [pod]
   */
  pod?: V1PodNetwork;
}

/**
 * @interface
 * An interface representing V1OwnerReference.
 * OwnerReference contains enough information to let you identify an owning
 * object. An owning object must be in the same namespace as the dependent, or
 * be cluster-scoped, so there is no namespace field.
 *
 */
export interface V1OwnerReference {
  /**
   * @member {string} apiVersion API version of the referent.
   */
  apiVersion: string;
  /**
   * @member {boolean} [blockOwnerDeletion] If true, AND if the owner has the
   * "foregroundDeletion" finalizer, then the owner cannot be deleted from the
   * key-value store until this reference is removed. Defaults to false. To set
   * this field, a user needs "delete" permission of the owner, otherwise 422
   * (Unprocessable Entity) will be returned.
   */
  blockOwnerDeletion?: boolean;
  /**
   * @member {boolean} [controller] If true, this reference points to the
   * managing controller.
   */
  controller?: boolean;
  /**
   * @member {string} kind Kind of the referent. More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind: string;
  /**
   * @member {string} name Name of the referent. More info:
   * http://kubernetes.io/docs/user-guide/identifiers#names
   */
  name: string;
  /**
   * @member {string} uid UID of the referent. More info:
   * http://kubernetes.io/docs/user-guide/identifiers#uids
   */
  uid: string;
}

/**
 * @interface
 * An interface representing V1ObjectMeta.
 * ObjectMeta is metadata that all persisted resources must have, which
 * includes all objects users must create.
 *
 */
export interface V1ObjectMeta {
  /**
   * @member {any} [annotations] Annotations is an unstructured key value map
   * stored with a resource that may be set by external tools to store and
   * retrieve arbitrary metadata. They are not queryable and should be
   * preserved when modifying objects. More info:
   * http://kubernetes.io/docs/user-guide/annotations
   */
  annotations?: any;
  /**
   * @member {string} [clusterName] The name of the cluster which the object
   * belongs to. This is used to distinguish resources with same name and
   * namespace in different clusters. This field is not set anywhere right now
   * and apiserver is going to ignore it if set in create or update request.
   */
  clusterName?: string;
  /**
   * @member {string} [creationTimestamp] CreationTimestamp is a timestamp
   * representing the server time when this object was created. It is not
   * guaranteed to be set in happens-before order across separate operations.
   * Clients may not set this value. It is represented in RFC3339 form and is
   * in UTC.
   *
   * Populated by the system. Read-only. Null for lists. More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
   */
  creationTimestamp?: string | null;
  /**
   * @member {number} [deletionGracePeriodSeconds] Number of seconds allowed
   * for this object to gracefully terminate before it will be removed from the
   * system. Only set when deletionTimestamp is also set. May only be
   * shortened. Read-only.
   */
  deletionGracePeriodSeconds?: number;
  /**
   * @member {string} [deletionTimestamp] DeletionTimestamp is RFC 3339 date
   * and time at which this resource will be deleted. This field is set by the
   * server when a graceful deletion is requested by the user, and is not
   * directly settable by a client. The resource is expected to be deleted (no
   * longer visible from resource lists, and not reachable by name) after the
   * time in this field, once the finalizers list is empty. As long as the
   * finalizers list contains items, deletion is blocked. Once the
   * deletionTimestamp is set, this value may not be unset or be set further
   * into the future, although it may be shortened or the resource may be
   * deleted prior to this time. For example, a user may request that a pod is
   * deleted in 30 seconds. The Kubelet will react by sending a graceful
   * termination signal to the containers in the pod. After that 30 seconds,
   * the Kubelet will send a hard termination signal (SIGKILL) to the container
   * and after cleanup, remove the pod from the API. In the presence of network
   * partitions, this object may still exist after this timestamp, until an
   * administrator or automated process can determine the resource is fully
   * terminated. If not set, graceful deletion of the object has not been
   * requested.
   *
   * Populated by the system when a graceful deletion is requested. Read-only.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
   */
  deletionTimestamp?: string;
  /**
   * @member {string[]} [finalizers] Must be empty before the object is deleted
   * from the registry. Each entry is an identifier for the responsible
   * component that will remove the entry from the list. If the
   * deletionTimestamp of the object is non-nil, entries in this list can only
   * be removed.
   */
  finalizers?: string[];
  /**
   * @member {string} [generateName] GenerateName is an optional prefix, used
   * by the server, to generate a unique name ONLY IF the Name field has not
   * been provided. If this field is used, the name returned to the client will
   * be different than the name passed. This value will also be combined with a
   * unique suffix. The provided value has the same validation rules as the
   * Name field, and may be truncated by the length of the suffix required to
   * make the value unique on the server.
   *
   * If this field is specified and the generated name exists, the server will
   * NOT return a 409 - instead, it will either return 201 Created or 500 with
   * Reason ServerTimeout indicating a unique name could not be found in the
   * time allotted, and the client should retry (optionally after the time
   * indicated in the Retry-After header).
   *
   * Applied only if Name is not specified. More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
   */
  generateName?: string;
  /**
   * @member {number} [generation] A sequence number representing a specific
   * generation of the desired state. Populated by the system. Read-only.
   */
  generation?: number;
  /**
   * @member {V1Initializers} [initializers] An initializer is a controller
   * which enforces some system invariant at object creation time. This field
   * is a list of initializers that have not yet acted on this object. If nil
   * or empty, this object has been completely initialized. Otherwise, the
   * object is considered uninitialized and is hidden (in list/watch and get
   * calls) from clients that haven't explicitly asked to observe uninitialized
   * objects.
   *
   * When an object is created, the system will populate this list with the
   * current set of initializers. Only privileged users may set or modify this
   * list. Once it is empty, it may not be modified further by any user.
   */
  initializers?: V1Initializers;
  /**
   * @member {any} [labels] Map of string keys and values that can be used to
   * organize and categorize (scope and select) objects. May match selectors of
   * replication controllers and services. More info:
   * http://kubernetes.io/docs/user-guide/labels
   */
  labels?: any;
  /**
   * @member {string} [name] Name must be unique within a namespace. Is
   * required when creating resources, although some resources may allow a
   * client to request the generation of an appropriate name automatically.
   * Name is primarily intended for creation idempotence and configuration
   * definition. Cannot be updated. More info:
   * http://kubernetes.io/docs/user-guide/identifiers#names
   */
  name?: string;
  /**
   * @member {string} [namespace] Namespace defines the space within each name
   * must be unique. An empty namespace is equivalent to the "default"
   * namespace, but "default" is the canonical representation. Not all objects
   * are required to be scoped to a namespace - the value of this field for
   * those objects will be empty.
   *
   * Must be a DNS_LABEL. Cannot be updated. More info:
   * http://kubernetes.io/docs/user-guide/namespaces
   */
  namespace?: string;
  /**
   * @member {V1OwnerReference[]} [ownerReferences] List of objects depended by
   * this object. If ALL objects in the list have been deleted, this object
   * will be garbage collected. If this object is managed by a controller, then
   * an entry in this list will point to this controller, with the controller
   * field set to true. There cannot be more than one managing controller.
   */
  ownerReferences?: V1OwnerReference[];
  /**
   * @member {string} [resourceVersion] An opaque value that represents the
   * internal version of this object that can be used by clients to determine
   * when objects have changed. May be used for optimistic concurrency, change
   * detection, and the watch operation on a resource or set of resources.
   * Clients must treat these values as opaque and passed unmodified back to
   * the server. They may only be valid for a particular resource or set of
   * resources.
   *
   * Populated by the system. Read-only. Value must be treated as opaque by
   * clients and . More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
   */
  resourceVersion?: string;
  /**
   * @member {string} [selfLink] SelfLink is a URL representing this object.
   * Populated by the system. Read-only.
   */
  selfLink?: string;
  /**
   * @member {string} [uid] UID is the unique in time and space value for this
   * object. It is typically generated by the server on successful creation of
   * a resource and is not allowed to change on PUT operations.
   *
   * Populated by the system. Read-only. More info:
   * http://kubernetes.io/docs/user-guide/identifiers#uids
   */
  uid?: string;
}

/**
 * @interface
 * An interface representing V1TypedLocalObjectReference.
 * TypedLocalObjectReference contains enough information to let you locate the
 * typed referenced object inside the same namespace.
 *
 */
export interface V1TypedLocalObjectReference {
  /**
   * @member {string} apiGroup APIGroup is the group for the resource being
   * referenced. If APIGroup is not specified, the specified Kind must be in
   * the core API group. For any other third-party types, APIGroup is required.
   */
  apiGroup: string;
  /**
   * @member {string} kind Kind is the type of resource being referenced
   */
  kind: string;
  /**
   * @member {string} name Name is the name of resource being referenced
   */
  name: string;
}

/**
 * @interface
 * An interface representing V1PersistentVolumeClaimSpec.
 * PersistentVolumeClaimSpec describes the common attributes of storage devices
 * and allows a Source for provider-specific attributes
 *
 */
export interface V1PersistentVolumeClaimSpec {
  /**
   * @member {any[]} [accessModes] AccessModes contains the desired access
   * modes the volume should have. More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   */
  accessModes?: any[];
  /**
   * @member {V1TypedLocalObjectReference} [dataSource] This field requires the
   * VolumeSnapshotDataSource alpha feature gate to be enabled and currently
   * VolumeSnapshot is the only supported data source. If the provisioner can
   * support VolumeSnapshot data source, it will create a new volume and data
   * will be restored to the volume at the same time. If the provisioner does
   * not support VolumeSnapshot data source, volume will not be created and the
   * failure will be reported as an event. In the future, we plan to support
   * more data source types and the behavior of the provisioner may change.
   */
  dataSource?: V1TypedLocalObjectReference;
  /**
   * @member {V1ResourceRequirements} [resources] Resources represents the
   * minimum resources the volume should have. More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
   */
  resources?: V1ResourceRequirements;
  /**
   * @member {V1LabelSelector} [selector] A label query over volumes to
   * consider for binding.
   */
  selector?: V1LabelSelector;
  /**
   * @member {string} [storageClassName] Name of the StorageClass required by
   * the claim. More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   */
  storageClassName?: string;
  /**
   * @member {any} [volumeMode] volumeMode defines what type of volume is
   * required by the claim. Value of Filesystem is implied when not included in
   * claim spec. This is a beta feature.
   */
  volumeMode?: any;
  /**
   * @member {string} [volumeName] VolumeName is the binding reference to the
   * PersistentVolume backing this claim.
   */
  volumeName?: string;
}

/**
 * @interface
 * An interface representing V1PodDNSConfigOption.
 * PodDNSConfigOption defines DNS resolver options of a pod.
 *
 */
export interface V1PodDNSConfigOption {
  /**
   * @member {string} [name] Required.
   */
  name?: string;
  /**
   * @member {string} [value]
   */
  value?: string;
}

/**
 * @interface
 * An interface representing V1PodDNSConfig.
 * PodDNSConfig defines the DNS parameters of a pod in addition to those
 * generated from DNSPolicy.
 *
 */
export interface V1PodDNSConfig {
  /**
   * @member {string[]} [nameservers] A list of DNS name server IP addresses.
   * This will be appended to the base nameservers generated from DNSPolicy.
   * Duplicated nameservers will be removed.
   */
  nameservers?: string[];
  /**
   * @member {V1PodDNSConfigOption[]} [options] A list of DNS resolver options.
   * This will be merged with the base options generated from DNSPolicy.
   * Duplicated entries will be removed. Resolution options given in Options
   * will override those that appear in the base DNSPolicy.
   */
  options?: V1PodDNSConfigOption[];
  /**
   * @member {string[]} [searches] A list of DNS search domains for host-name
   * lookup. This will be appended to the base search paths generated from
   * DNSPolicy. Duplicated search paths will be removed.
   */
  searches?: string[];
}

/**
 * @interface
 * An interface representing V1TCPSocketAction.
 * TCPSocketAction describes an action based on opening a socket
 *
 */
export interface V1TCPSocketAction {
  /**
   * @member {string} [host] Optional: Host name to connect to, defaults to the
   * pod IP.
   */
  host?: string;
  /**
   * @member {string} port Number or name of the port to access on the
   * container. Number must be in the range 1 to 65535. Name must be an
   * IANA_SVC_NAME.
   */
  port: string | number;
}

/**
 * @interface
 * An interface representing V1Probe.
 * Probe describes a health check to be performed against a
 * VirtualMachineInstance to determine whether it is
 * alive or ready to receive traffic.
 *
 */
export interface V1Probe {
  /**
   * @member {number} [failureThreshold] Minimum consecutive failures for the
   * probe to be considered failed after having succeeded.
   * Defaults to 3. Minimum value is 1.
   * +optional
   */
  failureThreshold?: number;
  /**
   * @member {V1HTTPGetAction} [httpGet] HTTPGet specifies the http request to
   * perform.
   * +optional
   */
  httpGet?: V1HTTPGetAction;
  /**
   * @member {number} [initialDelaySeconds] Number of seconds after the
   * VirtualMachineInstance has started before liveness probes are initiated.
   * More info:
   * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * +optional
   */
  initialDelaySeconds?: number;
  /**
   * @member {number} [periodSeconds] How often (in seconds) to perform the
   * probe.
   * Default to 10 seconds. Minimum value is 1.
   * +optional
   */
  periodSeconds?: number;
  /**
   * @member {number} [successThreshold] Minimum consecutive successes for the
   * probe to be considered successful after having failed.
   * Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   * +optional
   */
  successThreshold?: number;
  /**
   * @member {V1TCPSocketAction} [tcpSocket] TCPSocket specifies an action
   * involving a TCP port.
   * TCP hooks not yet supported
   * +optional
   */
  tcpSocket?: V1TCPSocketAction;
  /**
   * @member {number} [timeoutSeconds] Number of seconds after which the probe
   * times out.
   * Defaults to 1 second. Minimum value is 1.
   * More info:
   * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * +optional
   */
  timeoutSeconds?: number;
}

/**
 * @interface
 * An interface representing V1RootPaths.
 * RootPaths lists the paths available at root. For example: "/healthz",
 * "/apis".
 *
 */
export interface V1RootPaths {
  /**
   * @member {string[]} paths paths are the paths available at root.
   */
  paths: string[];
}

/**
 * @interface
 * An interface representing V1SecretVolumeSource.
 * SecretVolumeSource adapts a Secret into a volume.
 *
 */
export interface V1SecretVolumeSource {
  /**
   * @member {boolean} [optional] Specify whether the Secret or it's keys must
   * be defined
   * +optional
   */
  optional?: boolean;
  /**
   * @member {string} [secretName] Name of the secret in the pod's namespace to
   * use.
   * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
   * +optional
   */
  secretName?: string;
}

/**
 * @interface
 * An interface representing V1ServiceAccountVolumeSource.
 * ServiceAccountVolumeSource adapts a ServiceAccount into a volume.
 *
 */
export interface V1ServiceAccountVolumeSource {
  /**
   * @member {string} [serviceAccountName] Name of the service account in the
   * pod's namespace to use.
   * More info:
   * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
   */
  serviceAccountName?: string;
}

/**
 * @interface
 * An interface representing V1Toleration.
 * The pod this Toleration is attached to tolerates any taint that matches the
 * triple <key,value,effect> using the matching operator <operator>.
 *
 */
export interface V1Toleration {
  /**
   * @member {string} [effect] Effect indicates the taint effect to match.
   * Empty means match all taint effects. When specified, allowed values are
   * NoSchedule, PreferNoSchedule and NoExecute.
   */
  effect?: string;
  /**
   * @member {string} [key] Key is the taint key that the toleration applies
   * to. Empty means match all taint keys. If the key is empty, operator must
   * be Exists; this combination means to match all values and all keys.
   */
  key?: string;
  /**
   * @member {string} [operator] Operator represents a key's relationship to
   * the value. Valid operators are Exists and Equal. Defaults to Equal. Exists
   * is equivalent to wildcard for value, so that a pod can tolerate all taints
   * of a particular category.
   */
  operator?: string;
  /**
   * @member {number} [tolerationSeconds] TolerationSeconds represents the
   * period of time the toleration (which must be of effect NoExecute,
   * otherwise this field is ignored) tolerates the taint. By default, it is
   * not set, which means tolerate the taint forever (do not evict). Zero and
   * negative values will be treated as 0 (evict immediately) by the system.
   */
  tolerationSeconds?: number;
  /**
   * @member {string} [value] Value is the taint value the toleration matches
   * to. If the operator is Exists, the value should be empty, otherwise just a
   * regular string.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSourceHTTP.
 * DataVolumeSourceHTTP provides the parameters to create a Data Volume from an
 * HTTP source
 *
 */
export interface V1alpha1DataVolumeSourceHTTP {
  /**
   * @member {string} [certConfigMap] CertConfigMap provides a reference to the
   * Registry certs
   */
  certConfigMap?: string;
  /**
   * @member {string} [secretRef] SecretRef provides the secret reference
   * needed to access the HTTP source
   */
  secretRef?: string;
  /**
   * @member {string} [url] URL is the URL of the http source
   */
  url?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSourcePVC.
 * DataVolumeSourcePVC provides the parameters to create a Data Volume from an
 * existing PVC
 *
 */
export interface V1alpha1DataVolumeSourcePVC {
  /**
   * @member {string} [name]
   */
  name?: string;
  /**
   * @member {string} [namespace]
   */
  namespace?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSourceRegistry.
 * DataVolumeSourceRegistry provides the parameters to create a Data Volume
 * from an registry source
 *
 */
export interface V1alpha1DataVolumeSourceRegistry {
  /**
   * @member {string} [certConfigMap] CertConfigMap provides a reference to the
   * Registry certs
   */
  certConfigMap?: string;
  /**
   * @member {string} [secretRef] SecretRef provides the secret reference
   * needed to access the Registry source
   */
  secretRef?: string;
  /**
   * @member {string} [url] URL is the url of the Registry source
   */
  url?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSourceS3.
 * DataVolumeSourceS3 provides the parameters to create a Data Volume from an
 * S3 source
 *
 */
export interface V1alpha1DataVolumeSourceS3 {
  /**
   * @member {string} [secretRef] SecretRef provides the secret reference
   * needed to access the S3 source
   */
  secretRef?: string;
  /**
   * @member {string} [url] URL is the url of the S3 source
   */
  url?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSource.
 * DataVolumeSource represents the source for our Data Volume, this can be
 * HTTP, S3, Registry or an existing PVC
 *
 */
export interface V1alpha1DataVolumeSource {
  /**
   * @member {any} [blank]
   */
  blank?: any;
  /**
   * @member {V1alpha1DataVolumeSourceHTTP} [http]
   */
  http?: V1alpha1DataVolumeSourceHTTP;
  /**
   * @member {V1alpha1DataVolumeSourcePVC} [pvc]
   */
  pvc?: V1alpha1DataVolumeSourcePVC;
  /**
   * @member {V1alpha1DataVolumeSourceRegistry} [registry]
   */
  registry?: V1alpha1DataVolumeSourceRegistry;
  /**
   * @member {V1alpha1DataVolumeSourceS3} [s3]
   */
  s3?: V1alpha1DataVolumeSourceS3;
  /**
   * @member {any} [upload]
   */
  upload?: any;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeSpec.
 * DataVolumeSpec defines our specification for a DataVolume type
 *
 */
export interface V1alpha1DataVolumeSpec {
  /**
   * @member {string} [contentType] DataVolumeContentType options: "kubevirt",
   * "archive"
   */
  contentType?: string;
  /**
   * @member {V1PersistentVolumeClaimSpec} pvc PVC is a pointer to the PVC Spec
   * we want to use
   */
  pvc: V1PersistentVolumeClaimSpec;
  /**
   * @member {V1alpha1DataVolumeSource} source Source is the src of the data
   * for the requested DataVolume
   */
  source: V1alpha1DataVolumeSource;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolumeStatus.
 * DataVolumeStatus provides the parameters to store the phase of the Data
 * Volume
 *
 */
export interface V1alpha1DataVolumeStatus {
  /**
   * @member {string} [phase] Phase is the current phase of the data volume
   */
  phase?: string;
  /**
   * @member {string} [progress]
   */
  progress?: string;
}

/**
 * @interface
 * An interface representing V1alpha1DataVolume.
 * DataVolume provides a representation of our data volume
 * +genclient
 * +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
 *
 */
export interface V1alpha1DataVolume {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1alpha1DataVolumeSpec} spec
   */
  spec: V1alpha1DataVolumeSpec;
  /**
   * @member {V1alpha1DataVolumeStatus} [status]
   */
  status?: V1alpha1DataVolumeStatus;
}

/**
 * @interface
 * An interface representing V1Volume.
 * Volume represents a named volume in a vmi.
 *
 */
export interface V1Volume {
  /**
   * @member {V1CloudInitNoCloudSource} [cloudInitNoCloud] CloudInitNoCloud
   * represents a cloud-init NoCloud user-data source.
   * The NoCloud data will be added as a disk to the vmi. A proper cloud-init
   * installation is required inside the guest.
   * More info:
   * http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
   * +optional
   */
  cloudInitNoCloud?: V1CloudInitNoCloudSource;
  /**
   * @member {V1ConfigMapVolumeSource} [configMap] ConfigMapSource represents a
   * reference to a ConfigMap in the same namespace.
   * More info:
   * https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
   * +optional
   */
  configMap?: V1ConfigMapVolumeSource;
  /**
   * @member {V1ContainerDiskSource} [containerDisk] ContainerDisk references a
   * docker image, embedding a qcow or raw disk.
   * More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
   * +optional
   */
  containerDisk?: V1ContainerDiskSource;
  /**
   * @member {V1DataVolumeSource} [dataVolume] DataVolume represents the
   * dynamic creation a PVC for this volume as well as
   * the process of populating that PVC with a disk image.
   * +optional
   */
  dataVolume?: V1DataVolumeSource;
  /**
   * @member {V1EmptyDiskSource} [emptyDisk] EmptyDisk represents a temporary
   * disk which shares the vmis lifecycle.
   * More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
   * +optional
   */
  emptyDisk?: V1EmptyDiskSource;
  /**
   * @member {V1EphemeralVolumeSource} [ephemeral] Ephemeral is a special
   * volume source that "wraps" specified source and provides copy-on-write
   * image on top of it.
   * +optional
   */
  ephemeral?: V1EphemeralVolumeSource;
  /**
   * @member {V1HostDisk} [hostDisk] HostDisk represents a disk created on the
   * cluster level
   * +optional
   */
  hostDisk?: V1HostDisk;
  /**
   * @member {string} name Volume's name.
   * Must be a DNS_LABEL and unique within the vmi.
   * More info:
   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   */
  name: string;
  /**
   * @member {V1PersistentVolumeClaimVolumeSource} [persistentVolumeClaim]
   * PersistentVolumeClaimVolumeSource represents a reference to a
   * PersistentVolumeClaim in the same namespace.
   * Directly attached to the vmi via qemu.
   * More info:
   * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   * +optional
   */
  persistentVolumeClaim?: V1PersistentVolumeClaimVolumeSource;
  /**
   * @member {V1SecretVolumeSource} [secret] SecretVolumeSource represents a
   * reference to a secret data in the same namespace.
   * More info: https://kubernetes.io/docs/concepts/configuration/secret/
   * +optional
   */
  secret?: V1SecretVolumeSource;
  /**
   * @member {V1ServiceAccountVolumeSource} [serviceAccount]
   * ServiceAccountVolumeSource represents a reference to a service account.
   * There can only be one volume of this type!
   * More info:
   * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
   * +optional
   */
  serviceAccount?: V1ServiceAccountVolumeSource;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceSpec.
 * VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.
 *
 */
export interface V1VirtualMachineInstanceSpec {
  /**
   * @member {V1Affinity} [affinity] If affinity is specifies, obey all the
   * affinity rules
   */
  affinity?: V1Affinity;
  /**
   * @member {V1PodDNSConfig} [dnsConfig] Specifies the DNS parameters of a
   * pod.
   * Parameters specified here will be merged to the generated DNS
   * configuration based on DNSPolicy.
   * +optional
   */
  dnsConfig?: V1PodDNSConfig;
  /**
   * @member {string} [dnsPolicy] Set DNS policy for the pod.
   * Defaults to "ClusterFirst".
   * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or
   * 'None'.
   * DNS parameters given in DNSConfig will be merged with the policy selected
   * with DNSPolicy.
   * To have DNS options set along with hostNetwork, you have to specify DNS
   * policy
   * explicitly to 'ClusterFirstWithHostNet'.
   * +optional
   */
  dnsPolicy?: string;
  /**
   * @member {V1DomainSpec} domain Specification of the desired behavior of the
   * VirtualMachineInstance on the host.
   */
  domain: V1DomainSpec;
  /**
   * @member {any} [evictionStrategy] EvictionStrategy can be set to
   * "LiveMigrate" if the VirtualMachineInstance should be
   * migrated instead of shut-off in case of a node drain.
   */
  evictionStrategy?: any;
  /**
   * @member {string} [hostname] Specifies the hostname of the vmi
   * If not specified, the hostname will be set to the name of the vmi, if dhcp
   * or cloud-init is configured properly.
   * +optional
   */
  hostname?: string;
  /**
   * @member {V1Probe} [livenessProbe] Periodic probe of VirtualMachineInstance
   * liveness.
   * VirtualmachineInstances will be stopped if the probe fails.
   * Cannot be updated.
   * More info:
   * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * +optional
   */
  livenessProbe?: V1Probe;
  /**
   * @member {V1Network[]} [networks] List of networks that can be attached to
   * a vm's virtual interface.
   */
  networks?: V1Network[];
  /**
   * @member {any} [nodeSelector] NodeSelector is a selector which must be true
   * for the vmi to fit on a node.
   * Selector which must match a node's labels for the vmi to be scheduled on
   * that node.
   * More info:
   * https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   * +optional
   */
  nodeSelector?: any;
  /**
   * @member {V1Probe} [readinessProbe] Periodic probe of
   * VirtualMachineInstance service readiness.
   * VirtualmachineInstances will be removed from service endpoints if the
   * probe fails.
   * Cannot be updated.
   * More info:
   * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * +optional
   */
  readinessProbe?: V1Probe;
  /**
   * @member {string} [subdomain] If specified, the fully qualified vmi
   * hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster
   * domain>".
   * If not specified, the vmi will not have a domainname at all. The DNS entry
   * will resolve to the vmi,
   * no matter if the vmi itself can pick up a hostname.
   * +optional
   */
  subdomain?: string;
  /**
   * @member {number} [terminationGracePeriodSeconds] Grace period observed
   * after signalling a VirtualMachineInstance to stop after which the
   * VirtualMachineInstance is force terminated.
   */
  terminationGracePeriodSeconds?: number;
  /**
   * @member {V1Toleration[]} [tolerations] If toleration is specified, obey
   * all the toleration rules.
   */
  tolerations?: V1Toleration[];
  /**
   * @member {V1Volume[]} [volumes] List of volumes that can be mounted by
   * disks belonging to the vmi.
   */
  volumes?: V1Volume[];
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceTemplateSpec.
 */
export interface V1VirtualMachineInstanceTemplateSpec {
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineInstanceSpec} [spec] VirtualMachineInstance Spec
   * contains the VirtualMachineInstance specification.
   */
  spec?: V1VirtualMachineInstanceSpec;
}

/**
 * @interface
 * An interface representing V1VirtualMachineSpec.
 * VirtualMachineSpec describes how the proper VirtualMachine
 * should look like
 *
 */
export interface V1VirtualMachineSpec {
  /**
   * @member {V1alpha1DataVolume[]} [dataVolumeTemplates] dataVolumeTemplates
   * is a list of dataVolumes that the VirtualMachineInstance template can
   * reference.
   * DataVolumes in this list are dynamically created for the VirtualMachine
   * and are tied to the VirtualMachine's life-cycle.
   */
  dataVolumeTemplates?: V1alpha1DataVolume[];
  /**
   * @member {any} [runStrategy] Running state indicates the requested running
   * state of the VirtualMachineInstance
   * mutually exclusive with Running
   */
  runStrategy?: any;
  /**
   * @member {boolean} [running] Running controls whether the associatied
   * VirtualMachineInstance is created or not
   * Mutually exclusive with RunStrategy
   */
  running?: boolean;
  /**
   * @member {V1VirtualMachineInstanceTemplateSpec} template Template is the
   * direct specification of VirtualMachineInstance
   */
  template: V1VirtualMachineInstanceTemplateSpec;
}

/**
 * @interface
 * An interface representing V1VirtualMachineCondition.
 * VirtualMachineCondition represents the state of VirtualMachine
 *
 */
export interface V1VirtualMachineCondition {
  /**
   * @member {string} [lastProbeTime]
   */
  lastProbeTime?: string | null;
  /**
   * @member {string} [lastTransitionTime]
   */
  lastTransitionTime?: string | null;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [reason]
   */
  reason?: string;
  /**
   * @member {string} status
   */
  status: string;
  /**
   * @member {string} type
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineStateChangeRequest.
 */
export interface V1VirtualMachineStateChangeRequest {
  /**
   * @member {string} action Indicates the type of action that is requested.
   * e.g. Start or Stop
   */
  action: string;
  /**
   * @member {any} [uid] Indicates the UUID of an existing Virtual Machine
   * Instance that this change request applies to -- if applicable
   */
  uid?: any;
}

/**
 * @interface
 * An interface representing V1VirtualMachineStatus.
 * VirtualMachineStatus represents the status returned by the
 * controller to describe how the VirtualMachine is doing
 *
 */
export interface V1VirtualMachineStatus {
  /**
   * @member {V1VirtualMachineCondition[]} [conditions] Hold the state
   * information of the VirtualMachine and its VirtualMachineInstance
   */
  conditions?: V1VirtualMachineCondition[];
  /**
   * @member {boolean} [created] Created indicates if the virtual machine is
   * created in the cluster
   */
  created?: boolean;
  /**
   * @member {boolean} [ready] Ready indicates if the virtual machine is
   * running and ready
   */
  ready?: boolean;
  /**
   * @member {V1VirtualMachineStateChangeRequest[]} [stateChangeRequests]
   * StateChangeRequests indicates a list of actions that should be taken on a
   * VMI
   * e.g. stop a specific VMI then start a new one.
   */
  stateChangeRequests?: V1VirtualMachineStateChangeRequest[];
}

/**
 * @interface
 * An interface representing V1VirtualMachine.
 * VirtualMachine handles the VirtualMachines that are not running
 * or are in a stopped state
 * The VirtualMachine contains the template to create the
 * VirtualMachineInstance. It also mirrors the running state of the created
 * VirtualMachineInstance in its status.
 *
 */
export interface V1VirtualMachine {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineSpec} [spec] Spec contains the specification of
   * VirtualMachineInstance created
   */
  spec?: V1VirtualMachineSpec;
  /**
   * @member {V1VirtualMachineStatus} [status] Status holds the current state
   * of the controller and brief information
   * about its associated VirtualMachineInstance
   */
  status?: V1VirtualMachineStatus;
}



/**
 * @interface
 * An interface representing V1VirtualMachineInstanceCondition.
 */
export interface V1VirtualMachineInstanceCondition {
  /**
   * @member {string} [lastProbeTime]
   */
  lastProbeTime?: string | null;
  /**
   * @member {string} [lastTransitionTime]
   */
  lastTransitionTime?: string | null;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [reason]
   */
  reason?: string;
  /**
   * @member {string} status
   */
  status: string;
  /**
   * @member {string} type
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceNetworkInterface.
 */
export interface V1VirtualMachineInstanceNetworkInterface {
  /**
   * @member {string} [interfaceName] The interface name inside the Virtual
   * Machine
   */
  interfaceName?: string;
  /**
   * @member {string} [ipAddress] IP address of a Virtual Machine interface
   */
  ipAddress?: string;
  /**
   * @member {string[]} [ipAddresses] List of all IP addresses of a Virtual
   * Machine interface
   */
  ipAddresses?: string[];
  /**
   * @member {string} [mac] Hardware address of a Virtual Machine interface
   */
  mac?: string;
  /**
   * @member {string} [name] Name of the interface, corresponds to name of the
   * network assigned to the interface
   */
  name?: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigrationState.
 */
export interface V1VirtualMachineInstanceMigrationState {
  /**
   * @member {boolean} [abortRequested] Indicates that the migration has been
   * requested to abort
   */
  abortRequested?: boolean;
  /**
   * @member {string} [abortStatus] Indicates the final status of the live
   * migration abortion
   */
  abortStatus?: string;
  /**
   * @member {boolean} [completed] Indicates the migration completed
   */
  completed?: boolean;
  /**
   * @member {string} [endTimestamp] The time the migration action ended
   */
  endTimestamp?: string;
  /**
   * @member {boolean} [failed] Indicates that the migration failed
   */
  failed?: boolean;
  /**
   * @member {string} [migrationUid] The VirtualMachineInstanceMigration object
   * associated with this migration
   */
  migrationUid?: string;
  /**
   * @member {string} [sourceNode] The source node that the VMI originated on
   */
  sourceNode?: string;
  /**
   * @member {string} [startTimestamp] The time the migration action began
   */
  startTimestamp?: string;
  /**
   * @member {any} [targetDirectMigrationNodePorts] The list of ports opened
   * for live migration on the destination node
   */
  targetDirectMigrationNodePorts?: any;
  /**
   * @member {string} [targetNode] The target node that the VMI is moving to
   */
  targetNode?: string;
  /**
   * @member {string} [targetNodeAddress] The address of the target node to use
   * for the migration
   */
  targetNodeAddress?: string;
  /**
   * @member {boolean} [targetNodeDomainDetected] The Target Node has seen the
   * Domain Start Event
   */
  targetNodeDomainDetected?: boolean;
  /**
   * @member {string} [targetPod] The target pod that the VMI is moving to
   */
  targetPod?: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceStatus.
 * VirtualMachineInstanceStatus represents information about the status of a
 * VirtualMachineInstance. Status may trail the actual
 * state of a system.
 *
 */
export interface V1VirtualMachineInstanceStatus {
  /**
   * @member {V1VirtualMachineInstanceCondition[]} [conditions] Conditions are
   * specific points in VirtualMachineInstance's pod runtime.
   */
  conditions?: V1VirtualMachineInstanceCondition[];
  /**
   * @member {V1VirtualMachineInstanceNetworkInterface[]} [interfaces]
   * Interfaces represent the details of available network interfaces.
   */
  interfaces?: V1VirtualMachineInstanceNetworkInterface[];
  /**
   * @member {string} [migrationMethod] Represents the method using which the
   * vmi can be migrated: live migration or block migration
   */
  migrationMethod?: string;
  /**
   * @member {V1VirtualMachineInstanceMigrationState} [migrationState]
   * Represents the status of a live migration
   */
  migrationState?: V1VirtualMachineInstanceMigrationState;
  /**
   * @member {string} [nodeName] NodeName is the name where the
   * VirtualMachineInstance is currently running.
   */
  nodeName?: string;
  /**
   * @member {string} [phase] Phase is the status of the VirtualMachineInstance
   * in kubernetes world. It is not the VirtualMachineInstance status, but
   * partially correlates to it.
   */
  phase?: string;
  /**
   * @member {string} [reason] A brief CamelCase message indicating details
   * about why the VMI is in this state. e.g. 'NodeUnresponsive'
   * +optional
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstance.
 * VirtualMachineInstance is *the* VirtualMachineInstance Definition. It
 * represents a virtual machine in the runtime environment of kubernetes.
 *
 */
export interface V1VirtualMachineInstance {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineInstanceSpec} [spec] VirtualMachineInstance Spec
   * contains the VirtualMachineInstance specification.
   */
  spec?: V1VirtualMachineInstanceSpec;
  /**
   * @member {V1VirtualMachineInstanceStatus} [status] Status is the high level
   * overview of how the VirtualMachineInstance is doing. It contains
   * information available to controllers and users.
   */
  status?: V1VirtualMachineInstanceStatus;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceList.
 * VirtualMachineInstanceList is a list of VirtualMachines
 *
 */
export interface V1VirtualMachineInstanceList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1VirtualMachineInstance[]} items
   */
  items: V1VirtualMachineInstance[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ListMeta} [metadata]
   */
  metadata?: V1ListMeta;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigrationSpec.
 */
export interface V1VirtualMachineInstanceMigrationSpec {
  /**
   * @member {string} [vmiName] The name of the VMI to perform the migration
   * on. VMI must exist in the migration objects namespace
   */
  vmiName?: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigrationCondition.
 */
export interface V1VirtualMachineInstanceMigrationCondition {
  /**
   * @member {string} [lastProbeTime]
   */
  lastProbeTime?: string | null;
  /**
   * @member {string} [lastTransitionTime]
   */
  lastTransitionTime?: string | null;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [reason]
   */
  reason?: string;
  /**
   * @member {string} status
   */
  status: string;
  /**
   * @member {string} type
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigrationStatus.
 * VirtualMachineInstanceMigration reprents information pertaining to a VMI's
 * migration.
 *
 */
export interface V1VirtualMachineInstanceMigrationStatus {
  /**
   * @member {V1VirtualMachineInstanceMigrationCondition[]} [conditions]
   */
  conditions?: V1VirtualMachineInstanceMigrationCondition[];
  /**
   * @member {string} [phase]
   */
  phase?: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigration.
 * VirtualMachineInstanceMigration represents the object tracking a VMI's
 * migration
 * to another host in the cluster
 *
 */
export interface V1VirtualMachineInstanceMigration {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineInstanceMigrationSpec} [spec]
   */
  spec?: V1VirtualMachineInstanceMigrationSpec;
  /**
   * @member {V1VirtualMachineInstanceMigrationStatus} [status]
   */
  status?: V1VirtualMachineInstanceMigrationStatus;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceMigrationList.
 * VirtualMachineInstanceMigrationList is a list of VirtualMachineMigrations
 *
 */
export interface V1VirtualMachineInstanceMigrationList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1VirtualMachineInstanceMigration[]} items
   */
  items: V1VirtualMachineInstanceMigration[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ListMeta} [metadata]
   */
  metadata?: V1ListMeta;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstancePresetSpec.
 */
export interface V1VirtualMachineInstancePresetSpec {
  /**
   * @member {V1DomainSpec} [domain] Domain is the same object type as
   * contained in VirtualMachineInstanceSpec
   */
  domain?: V1DomainSpec;
  /**
   * @member {V1LabelSelector} selector Selector is a label query over a set of
   * VMIs.
   * Required.
   */
  selector: V1LabelSelector;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstancePreset.
 */
export interface V1VirtualMachineInstancePreset {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineInstancePresetSpec} [spec] VirtualMachineInstance
   * Spec contains the VirtualMachineInstance specification.
   */
  spec?: V1VirtualMachineInstancePresetSpec;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstancePresetList.
 * VirtualMachineInstancePresetList is a list of VirtualMachinePresets
 *
 */
export interface V1VirtualMachineInstancePresetList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1VirtualMachineInstancePreset[]} items
   */
  items: V1VirtualMachineInstancePreset[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ListMeta} [metadata]
   */
  metadata?: V1ListMeta;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceReplicaSetSpec.
 */
export interface V1VirtualMachineInstanceReplicaSetSpec {
  /**
   * @member {boolean} [paused] Indicates that the replica set is paused.
   * +optional
   */
  paused?: boolean;
  /**
   * @member {number} [replicas] Number of desired pods. This is a pointer to
   * distinguish between explicit
   * zero and not specified. Defaults to 1.
   * +optional
   */
  replicas?: number;
  /**
   * @member {V1LabelSelector} selector Label selector for pods. Existing
   * ReplicaSets whose pods are
   * selected by this will be the ones affected by this deployment.
   */
  selector: V1LabelSelector;
  /**
   * @member {V1VirtualMachineInstanceTemplateSpec} template Template describes
   * the pods that will be created.
   */
  template: V1VirtualMachineInstanceTemplateSpec;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceReplicaSetCondition.
 */
export interface V1VirtualMachineInstanceReplicaSetCondition {
  /**
   * @member {string} [lastProbeTime]
   */
  lastProbeTime?: string | null;
  /**
   * @member {string} [lastTransitionTime]
   */
  lastTransitionTime?: string | null;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [reason]
   */
  reason?: string;
  /**
   * @member {string} status
   */
  status: string;
  /**
   * @member {string} type
   */
  type: string;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceReplicaSetStatus.
 */
export interface V1VirtualMachineInstanceReplicaSetStatus {
  /**
   * @member {V1VirtualMachineInstanceReplicaSetCondition[]} [conditions]
   */
  conditions?: V1VirtualMachineInstanceReplicaSetCondition[];
  /**
   * @member {string} [labelSelector] Canonical form of the label selector for
   * HPA which consumes it through the scale subresource.
   */
  labelSelector?: string;
  /**
   * @member {number} [readyReplicas] The number of ready replicas for this
   * replica set.
   * +optional
   */
  readyReplicas?: number;
  /**
   * @member {number} [replicas] Total number of non-terminated pods targeted
   * by this deployment (their labels match the selector).
   * +optional
   */
  replicas?: number;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceReplicaSet.
 * VirtualMachineInstance is *the* VirtualMachineInstance Definition. It
 * represents a virtual machine in the runtime environment of kubernetes.
 *
 */
export interface V1VirtualMachineInstanceReplicaSet {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ObjectMeta} [metadata]
   */
  metadata?: V1ObjectMeta;
  /**
   * @member {V1VirtualMachineInstanceReplicaSetSpec} [spec]
   * VirtualMachineInstance Spec contains the VirtualMachineInstance
   * specification.
   */
  spec?: V1VirtualMachineInstanceReplicaSetSpec;
  /**
   * @member {V1VirtualMachineInstanceReplicaSetStatus} [status] Status is the
   * high level overview of how the VirtualMachineInstance is doing. It
   * contains information available to controllers and users.
   */
  status?: V1VirtualMachineInstanceReplicaSetStatus;
}

/**
 * @interface
 * An interface representing V1VirtualMachineInstanceReplicaSetList.
 * VMIList is a list of VMIs
 *
 */
export interface V1VirtualMachineInstanceReplicaSetList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1VirtualMachineInstanceReplicaSet[]} items
   */
  items: V1VirtualMachineInstanceReplicaSet[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ListMeta} [metadata]
   */
  metadata?: V1ListMeta;
}

/**
 * @interface
 * An interface representing V1VirtualMachineList.
 * VirtualMachineList is a list of virtualmachines
 *
 */
export interface V1VirtualMachineList {
  /**
   * @member {string} [apiVersion] APIVersion defines the versioned schema of
   * this representation of an object. Servers should convert recognized
   * schemas to the latest internal value, and may reject unrecognized values.
   * More info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * @member {V1VirtualMachine[]} items Items is a list of VirtualMachines
   */
  items: V1VirtualMachine[];
  /**
   * @member {string} [kind] Kind is a string value representing the REST
   * resource this object represents. Servers may infer this from the endpoint
   * the client submits requests to. Cannot be updated. In CamelCase. More
   * info:
   * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * @member {V1ListMeta} metadata
   */
  metadata: V1ListMeta;
}

/**
 * @interface
 * An interface representing V1WatchEvent.
 */
export interface V1WatchEvent {
  /**
   * @member {string} object
   */
  object: string;
  /**
   * @member {string} type
   */
  type: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIOptions.
 * @extends ServiceClientOptions
 */
export interface KubeVirtAPIOptions extends ServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListNamespacedVirtualMachineInstanceMigrationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListNamespacedVirtualMachineInstanceMigrationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceMigrationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceMigrationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIReadNamespacedVirtualMachineInstanceMigrationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIReadNamespacedVirtualMachineInstanceMigrationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [exact] Should the export be exact. Exact export
   * maintains cluster-specific fields like 'Namespace'.
   */
  exact?: boolean;
  /**
   * @member {boolean} [exportParameter] Should this value be exported. Export
   * strips fields that a user can not specify.
   */
  exportParameter?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteNamespacedVirtualMachineInstanceMigrationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteNamespacedVirtualMachineInstanceMigrationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {string} [propagationPolicy] Whether and how garbage collection
   * will be performed. Either this field or OrphanDependents may be set, but
   * not both. The default policy is decided by the existing finalizer set in
   * the metadata.finalizers and the resource-specific default policy.
   * Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
   * allow the garbage collector to delete the dependents in the background;
   * 'Foreground' - a cascading policy that deletes all dependents in the
   * foreground.
   */
  propagationPolicy?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListNamespacedVirtualMachineInstancePresetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListNamespacedVirtualMachineInstancePresetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstancePresetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstancePresetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIReadNamespacedVirtualMachineInstancePresetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIReadNamespacedVirtualMachineInstancePresetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [exact] Should the export be exact. Exact export
   * maintains cluster-specific fields like 'Namespace'.
   */
  exact?: boolean;
  /**
   * @member {boolean} [exportParameter] Should this value be exported. Export
   * strips fields that a user can not specify.
   */
  exportParameter?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteNamespacedVirtualMachineInstancePresetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteNamespacedVirtualMachineInstancePresetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {string} [propagationPolicy] Whether and how garbage collection
   * will be performed. Either this field or OrphanDependents may be set, but
   * not both. The default policy is decided by the existing finalizer set in
   * the metadata.finalizers and the resource-specific default policy.
   * Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
   * allow the garbage collector to delete the dependents in the background;
   * 'Foreground' - a cascading policy that deletes all dependents in the
   * foreground.
   */
  propagationPolicy?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListNamespacedVirtualMachineInstanceReplicaSetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListNamespacedVirtualMachineInstanceReplicaSetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceReplicaSetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceReplicaSetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIReadNamespacedVirtualMachineInstanceReplicaSetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIReadNamespacedVirtualMachineInstanceReplicaSetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [exact] Should the export be exact. Exact export
   * maintains cluster-specific fields like 'Namespace'.
   */
  exact?: boolean;
  /**
   * @member {boolean} [exportParameter] Should this value be exported. Export
   * strips fields that a user can not specify.
   */
  exportParameter?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteNamespacedVirtualMachineInstanceReplicaSetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteNamespacedVirtualMachineInstanceReplicaSetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {string} [propagationPolicy] Whether and how garbage collection
   * will be performed. Either this field or OrphanDependents may be set, but
   * not both. The default policy is decided by the existing finalizer set in
   * the metadata.finalizers and the resource-specific default policy.
   * Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
   * allow the garbage collector to delete the dependents in the background;
   * 'Foreground' - a cascading policy that deletes all dependents in the
   * foreground.
   */
  propagationPolicy?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListNamespacedVirtualMachineInstanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListNamespacedVirtualMachineInstanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIReadNamespacedVirtualMachineInstanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIReadNamespacedVirtualMachineInstanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [exact] Should the export be exact. Exact export
   * maintains cluster-specific fields like 'Namespace'.
   */
  exact?: boolean;
  /**
   * @member {boolean} [exportParameter] Should this value be exported. Export
   * strips fields that a user can not specify.
   */
  exportParameter?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteNamespacedVirtualMachineInstanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteNamespacedVirtualMachineInstanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {string} [propagationPolicy] Whether and how garbage collection
   * will be performed. Either this field or OrphanDependents may be set, but
   * not both. The default policy is decided by the existing finalizer set in
   * the metadata.finalizers and the resource-specific default policy.
   * Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
   * allow the garbage collector to delete the dependents in the background;
   * 'Foreground' - a cascading policy that deletes all dependents in the
   * foreground.
   */
  propagationPolicy?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListNamespacedVirtualMachineOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListNamespacedVirtualMachineOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteCollectionNamespacedVirtualMachineOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteCollectionNamespacedVirtualMachineOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIReadNamespacedVirtualMachineOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIReadNamespacedVirtualMachineOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [exact] Should the export be exact. Exact export
   * maintains cluster-specific fields like 'Namespace'.
   */
  exact?: boolean;
  /**
   * @member {boolean} [exportParameter] Should this value be exported. Export
   * strips fields that a user can not specify.
   */
  exportParameter?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIDeleteNamespacedVirtualMachineOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIDeleteNamespacedVirtualMachineOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [gracePeriodSeconds] The duration in seconds before the
   * object should be deleted. Value must be non-negative integer. The value
   * zero indicates delete immediately. If this value is nil, the default grace
   * period for the specified type will be used. Defaults to a per object value
   * if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: number;
  /**
   * @member {boolean} [orphanDependents] Deprecated: please use the
   * PropagationPolicy, this field will be deprecated in 1.7. Should the
   * dependent objects be orphaned. If true/false, the "orphan" finalizer will
   * be added to/removed from the object's finalizers list. Either this field
   * or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * @member {string} [propagationPolicy] Whether and how garbage collection
   * will be performed. Either this field or OrphanDependents may be set, but
   * not both. The default policy is decided by the existing finalizer set in
   * the metadata.finalizers and the resource-specific default policy.
   * Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
   * allow the garbage collector to delete the dependents in the background;
   * 'Foreground' - a cascading policy that deletes all dependents in the
   * foreground.
   */
  propagationPolicy?: string;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListVirtualMachineInstanceMigrationForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListVirtualMachineInstanceMigrationForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListVirtualMachineInstancePresetForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListVirtualMachineInstancePresetForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListVirtualMachineInstanceReplicaSetForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListVirtualMachineInstanceReplicaSetForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListVirtualMachineInstanceForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListVirtualMachineInstanceForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIListVirtualMachineForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIListVirtualMachineForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchNamespacedVirtualMachineInstanceMigrationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchNamespacedVirtualMachineInstanceMigrationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchNamespacedVirtualMachineInstancePresetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchNamespacedVirtualMachineInstancePresetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchNamespacedVirtualMachineInstanceReplicaSetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchNamespacedVirtualMachineInstanceReplicaSetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchNamespacedVirtualMachineInstanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchNamespacedVirtualMachineInstanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchNamespacedVirtualMachineOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchNamespacedVirtualMachineOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchVirtualMachineInstanceMigrationListForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchVirtualMachineInstanceMigrationListForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchVirtualMachineInstancePresetListForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchVirtualMachineInstancePresetListForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchVirtualMachineInstanceReplicaSetListForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchVirtualMachineInstanceReplicaSetListForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchVirtualMachineInstanceListForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchVirtualMachineInstanceListForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * @interface
 * An interface representing KubeVirtAPIWatchVirtualMachineListForAllNamespacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface KubeVirtAPIWatchVirtualMachineListForAllNamespacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [continueParameter] The continue option should be set
   * when retrieving more results from the server. Since this value is server
   * defined, clients may only use the continue value from a previous query
   * result with identical query parameters (except for the value of continue)
   * and the server may reject a continue value it does not recognize. If the
   * specified continue value is no longer valid whether due to expiration
   * (generally five to fifteen minutes) or a configuration change on the
   * server the server will respond with a 410 ResourceExpired error indicating
   * the client must restart their list without the continue field. This field
   * is not supported when watch is true. Clients may start a watch from the
   * last resourceVersion value returned by the server and not miss any
   * modifications.
   */
  continueParameter?: string;
  /**
   * @member {string} [fieldSelector] A selector to restrict the list of
   * returned objects by their fields. Defaults to everything.
   */
  fieldSelector?: string;
  /**
   * @member {boolean} [includeUninitialized] If true, partially initialized
   * resources are included in the response.
   */
  includeUninitialized?: boolean;
  /**
   * @member {string} [labelSelector] A selector to restrict the list of
   * returned objects by their labels. Defaults to everything
   */
  labelSelector?: string;
  /**
   * @member {number} [limit] limit is a maximum number of responses to return
   * for a list call. If more items exist, the server will set the `continue`
   * field on the list metadata to a value that can be used with the same
   * initial query to retrieve the next set of results. Setting a limit may
   * return fewer than the requested amount of items (up to zero items) in the
   * event all requested objects are filtered out and clients should only use
   * the presence of the continue field to determine whether more results are
   * available. Servers may choose not to support the limit argument and will
   * return all of the available results. If limit is specified and the
   * continue field is empty, clients may assume that no more results are
   * available. This field is not supported if watch is true.
   *
   * The server guarantees that the objects returned when using continue will
   * be identical to issuing a single list call without a limit - that is, no
   * objects created, modified, or deleted after the first request is issued
   * will be included in any subsequent continued requests. This is sometimes
   * referred to as a consistent snapshot, and ensures that a client that is
   * using limit to receive smaller chunks of a very large result can ensure
   * they see all possible objects. If objects are updated during a chunked
   * list the version of the object that was present at the time the first list
   * result was calculated is returned.
   */
  limit?: number;
  /**
   * @member {string} [resourceVersion] When specified with a watch call, shows
   * changes that occur after that particular version of a resource. Defaults
   * to changes from the beginning of history.
   */
  resourceVersion?: string;
  /**
   * @member {number} [timeoutSeconds] TimeoutSeconds for the list/watch call.
   */
  timeoutSeconds?: number;
  /**
   * @member {boolean} [watch] Watch for changes to the described resources and
   * return them as a stream of add, update, and remove notifications. Specify
   * resourceVersion.
   */
  watch?: boolean;
}

/**
 * Contains response data for the getAPIGroupList operation.
 */
export type GetAPIGroupListResponse = V1APIGroupList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1APIGroupList;
    };
};

/**
 * Contains response data for the getAPIGroup operation.
 */
export type GetAPIGroupResponse = V1APIGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1APIGroup;
    };
};

/**
 * Contains response data for the getAPIResources operation.
 */
export type GetAPIResourcesResponse = V1APIResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1APIResourceList;
    };
};

/**
 * Contains response data for the listNamespacedVirtualMachineInstanceMigration operation.
 */
export type ListNamespacedVirtualMachineInstanceMigrationResponse = V1VirtualMachineInstanceMigrationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigrationList;
    };
};

/**
 * Contains response data for the createNamespacedVirtualMachineInstanceMigration operation.
 */
export type CreateNamespacedVirtualMachineInstanceMigrationResponse = V1VirtualMachineInstanceMigration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigration;
    };
};

/**
 * Contains response data for the deleteCollectionNamespacedVirtualMachineInstanceMigration
 * operation.
 */
export type DeleteCollectionNamespacedVirtualMachineInstanceMigrationResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the readNamespacedVirtualMachineInstanceMigration operation.
 */
export type ReadNamespacedVirtualMachineInstanceMigrationResponse = V1VirtualMachineInstanceMigration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigration;
    };
};

/**
 * Contains response data for the replaceNamespacedVirtualMachineInstanceMigration operation.
 */
export type ReplaceNamespacedVirtualMachineInstanceMigrationResponse = V1VirtualMachineInstanceMigration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigration;
    };
};

/**
 * Contains response data for the deleteNamespacedVirtualMachineInstanceMigration operation.
 */
export type DeleteNamespacedVirtualMachineInstanceMigrationResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the patchNamespacedVirtualMachineInstanceMigration operation.
 */
export type PatchNamespacedVirtualMachineInstanceMigrationResponse = V1VirtualMachineInstanceMigration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigration;
    };
};

/**
 * Contains response data for the listNamespacedVirtualMachineInstancePreset operation.
 */
export type ListNamespacedVirtualMachineInstancePresetResponse = V1VirtualMachineInstancePresetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePresetList;
    };
};

/**
 * Contains response data for the createNamespacedVirtualMachineInstancePreset operation.
 */
export type CreateNamespacedVirtualMachineInstancePresetResponse = V1VirtualMachineInstancePreset & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePreset;
    };
};

/**
 * Contains response data for the deleteCollectionNamespacedVirtualMachineInstancePreset operation.
 */
export type DeleteCollectionNamespacedVirtualMachineInstancePresetResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the readNamespacedVirtualMachineInstancePreset operation.
 */
export type ReadNamespacedVirtualMachineInstancePresetResponse = V1VirtualMachineInstancePreset & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePreset;
    };
};

/**
 * Contains response data for the replaceNamespacedVirtualMachineInstancePreset operation.
 */
export type ReplaceNamespacedVirtualMachineInstancePresetResponse = V1VirtualMachineInstancePreset & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePreset;
    };
};

/**
 * Contains response data for the deleteNamespacedVirtualMachineInstancePreset operation.
 */
export type DeleteNamespacedVirtualMachineInstancePresetResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the patchNamespacedVirtualMachineInstancePreset operation.
 */
export type PatchNamespacedVirtualMachineInstancePresetResponse = V1VirtualMachineInstancePreset & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePreset;
    };
};

/**
 * Contains response data for the listNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type ListNamespacedVirtualMachineInstanceReplicaSetResponse = V1VirtualMachineInstanceReplicaSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSetList;
    };
};

/**
 * Contains response data for the createNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type CreateNamespacedVirtualMachineInstanceReplicaSetResponse = V1VirtualMachineInstanceReplicaSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSet;
    };
};

/**
 * Contains response data for the deleteCollectionNamespacedVirtualMachineInstanceReplicaSet
 * operation.
 */
export type DeleteCollectionNamespacedVirtualMachineInstanceReplicaSetResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the readNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type ReadNamespacedVirtualMachineInstanceReplicaSetResponse = V1VirtualMachineInstanceReplicaSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSet;
    };
};

/**
 * Contains response data for the replaceNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type ReplaceNamespacedVirtualMachineInstanceReplicaSetResponse = V1VirtualMachineInstanceReplicaSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSet;
    };
};

/**
 * Contains response data for the deleteNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type DeleteNamespacedVirtualMachineInstanceReplicaSetResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the patchNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type PatchNamespacedVirtualMachineInstanceReplicaSetResponse = V1VirtualMachineInstanceReplicaSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSet;
    };
};

/**
 * Contains response data for the listNamespacedVirtualMachineInstance operation.
 */
export type ListNamespacedVirtualMachineInstanceResponse = V1VirtualMachineInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceList;
    };
};

/**
 * Contains response data for the createNamespacedVirtualMachineInstance operation.
 */
export type CreateNamespacedVirtualMachineInstanceResponse = V1VirtualMachineInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstance;
    };
};

/**
 * Contains response data for the deleteCollectionNamespacedVirtualMachineInstance operation.
 */
export type DeleteCollectionNamespacedVirtualMachineInstanceResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the readNamespacedVirtualMachineInstance operation.
 */
export type ReadNamespacedVirtualMachineInstanceResponse = V1VirtualMachineInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstance;
    };
};

/**
 * Contains response data for the replaceNamespacedVirtualMachineInstance operation.
 */
export type ReplaceNamespacedVirtualMachineInstanceResponse = V1VirtualMachineInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstance;
    };
};

/**
 * Contains response data for the deleteNamespacedVirtualMachineInstance operation.
 */
export type DeleteNamespacedVirtualMachineInstanceResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the patchNamespacedVirtualMachineInstance operation.
 */
export type PatchNamespacedVirtualMachineInstanceResponse = V1VirtualMachineInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstance;
    };
};

/**
 * Contains response data for the listNamespacedVirtualMachine operation.
 */
export type ListNamespacedVirtualMachineResponse = V1VirtualMachineList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineList;
    };
};

/**
 * Contains response data for the createNamespacedVirtualMachine operation.
 */
export type CreateNamespacedVirtualMachineResponse = V1VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachine;
    };
};

/**
 * Contains response data for the deleteCollectionNamespacedVirtualMachine operation.
 */
export type DeleteCollectionNamespacedVirtualMachineResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the readNamespacedVirtualMachine operation.
 */
export type ReadNamespacedVirtualMachineResponse = V1VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachine;
    };
};

/**
 * Contains response data for the replaceNamespacedVirtualMachine operation.
 */
export type ReplaceNamespacedVirtualMachineResponse = V1VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachine;
    };
};

/**
 * Contains response data for the deleteNamespacedVirtualMachine operation.
 */
export type DeleteNamespacedVirtualMachineResponse = V1Status & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1Status;
    };
};

/**
 * Contains response data for the patchNamespacedVirtualMachine operation.
 */
export type PatchNamespacedVirtualMachineResponse = V1VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachine;
    };
};

/**
 * Contains response data for the listVirtualMachineInstanceMigrationForAllNamespaces operation.
 */
export type ListVirtualMachineInstanceMigrationForAllNamespacesResponse = V1VirtualMachineInstanceMigrationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceMigrationList;
    };
};

/**
 * Contains response data for the listVirtualMachineInstancePresetForAllNamespaces operation.
 */
export type ListVirtualMachineInstancePresetForAllNamespacesResponse = V1VirtualMachineInstancePresetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstancePresetList;
    };
};

/**
 * Contains response data for the listVirtualMachineInstanceReplicaSetForAllNamespaces operation.
 */
export type ListVirtualMachineInstanceReplicaSetForAllNamespacesResponse = V1VirtualMachineInstanceReplicaSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceReplicaSetList;
    };
};

/**
 * Contains response data for the listVirtualMachineInstanceForAllNamespaces operation.
 */
export type ListVirtualMachineInstanceForAllNamespacesResponse = V1VirtualMachineInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineInstanceList;
    };
};

/**
 * Contains response data for the listVirtualMachineForAllNamespaces operation.
 */
export type ListVirtualMachineForAllNamespacesResponse = V1VirtualMachineList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1VirtualMachineList;
    };
};

/**
 * Contains response data for the watchNamespacedVirtualMachineInstanceMigration operation.
 */
export type WatchNamespacedVirtualMachineInstanceMigrationResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchNamespacedVirtualMachineInstancePreset operation.
 */
export type WatchNamespacedVirtualMachineInstancePresetResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchNamespacedVirtualMachineInstanceReplicaSet operation.
 */
export type WatchNamespacedVirtualMachineInstanceReplicaSetResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchNamespacedVirtualMachineInstance operation.
 */
export type WatchNamespacedVirtualMachineInstanceResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchNamespacedVirtualMachine operation.
 */
export type WatchNamespacedVirtualMachineResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchVirtualMachineInstanceMigrationListForAllNamespaces
 * operation.
 */
export type WatchVirtualMachineInstanceMigrationListForAllNamespacesResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchVirtualMachineInstancePresetListForAllNamespaces operation.
 */
export type WatchVirtualMachineInstancePresetListForAllNamespacesResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchVirtualMachineInstanceReplicaSetListForAllNamespaces
 * operation.
 */
export type WatchVirtualMachineInstanceReplicaSetListForAllNamespacesResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchVirtualMachineInstanceListForAllNamespaces operation.
 */
export type WatchVirtualMachineInstanceListForAllNamespacesResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the watchVirtualMachineListForAllNamespaces operation.
 */
export type WatchVirtualMachineListForAllNamespacesResponse = V1WatchEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1WatchEvent;
    };
};

/**
 * Contains response data for the getAPIGroup1 operation.
 */
export type GetAPIGroup1Response = V1APIGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1APIGroup;
    };
};

/**
 * Contains response data for the getAPIResources1 operation.
 */
export type GetAPIResources1Response = V1APIResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: V1APIResourceList;
    };
};
