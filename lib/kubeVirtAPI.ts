/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { KubeVirtAPIContext } from "./kubeVirtAPIContext";

class KubeVirtAPI extends KubeVirtAPIContext {
  /**
   * Initializes a new instance of the KubeVirtAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.KubeVirtAPIOptions) {
    super(options);
  }

  /**
   * @summary Get a KubeVirt API GroupList
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIGroupListResponse>
   */
  getAPIGroupList(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIGroupListResponse>;
  /**
   * @param callback The callback
   */
  getAPIGroupList(callback: msRest.ServiceCallback<Models.V1APIGroupList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIGroupList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroupList>): void;
  getAPIGroupList(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroupList>, callback?: msRest.ServiceCallback<Models.V1APIGroupList>): Promise<Models.GetAPIGroupListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIGroupListOperationSpec,
      callback) as Promise<Models.GetAPIGroupListResponse>;
  }

  /**
   * @summary Get a KubeVirt API group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIGroupResponse>
   */
  getAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIGroupOperationSpec,
      callback) as Promise<Models.GetAPIGroupResponse>;
  }

  /**
   * @summary Get KubeVirt API Resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIResourcesResponse>
   */
  getAPIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAPIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAPIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAPIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIResourcesOperationSpec,
      callback) as Promise<Models.GetAPIResourcesResponse>;
  }

  /**
   * @summary Get a list of VirtualMachineInstanceMigration objects.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNamespacedVirtualMachineInstanceMigrationResponse>
   */
  listNamespacedVirtualMachineInstanceMigration(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceMigrationOptionalParams): Promise<Models.ListNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstanceMigration(namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstanceMigration(namespace: string, options: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceMigrationOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): void;
  listNamespacedVirtualMachineInstanceMigration(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceMigrationOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): Promise<Models.ListNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.ListNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Create a VirtualMachineInstanceMigration object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedVirtualMachineInstanceMigrationResponse>
   */
  createNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  createNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): Promise<Models.CreateNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.CreateNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Delete a collection of VirtualMachineInstanceMigration objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceMigrationResponse>
   */
  deleteCollectionNamespacedVirtualMachineInstanceMigration(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceMigrationOptionalParams): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstanceMigration(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstanceMigration(options: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceMigrationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCollectionNamespacedVirtualMachineInstanceMigration(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceMigrationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCollectionNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Get a VirtualMachineInstanceMigration object.
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNamespacedVirtualMachineInstanceMigrationResponse>
   */
  readNamespacedVirtualMachineInstanceMigration(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceMigrationOptionalParams): Promise<Models.ReadNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstanceMigration(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstanceMigration(name: string, namespace: string, options: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceMigrationOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  readNamespacedVirtualMachineInstanceMigration(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceMigrationOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): Promise<Models.ReadNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.ReadNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Update a VirtualMachineInstanceMigration object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNamespacedVirtualMachineInstanceMigrationResponse>
   */
  replaceNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplaceNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  replaceNamespacedVirtualMachineInstanceMigration(body: Models.V1VirtualMachineInstanceMigration, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): Promise<Models.ReplaceNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      replaceNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.ReplaceNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Delete a VirtualMachineInstanceMigration object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNamespacedVirtualMachineInstanceMigrationResponse>
   */
  deleteNamespacedVirtualMachineInstanceMigration(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceMigrationOptionalParams): Promise<Models.DeleteNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstanceMigration(body: Models.V1DeleteOptions, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstanceMigration(body: Models.V1DeleteOptions, namespace: string, name: string, options: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceMigrationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNamespacedVirtualMachineInstanceMigration(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceMigrationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      deleteNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.DeleteNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Patch a VirtualMachineInstanceMigration object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNamespacedVirtualMachineInstanceMigrationResponse>
   */
  patchNamespacedVirtualMachineInstanceMigration(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstanceMigration(body: any, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstanceMigration(body: any, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): void;
  patchNamespacedVirtualMachineInstanceMigration(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigration>): Promise<Models.PatchNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      patchNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.PatchNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Get a list of VirtualMachineInstancePreset objects.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNamespacedVirtualMachineInstancePresetResponse>
   */
  listNamespacedVirtualMachineInstancePreset(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstancePresetOptionalParams): Promise<Models.ListNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstancePreset(namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstancePreset(namespace: string, options: Models.KubeVirtAPIListNamespacedVirtualMachineInstancePresetOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): void;
  listNamespacedVirtualMachineInstancePreset(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstancePresetOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): Promise<Models.ListNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.ListNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Create a VirtualMachineInstancePreset object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedVirtualMachineInstancePresetResponse>
   */
  createNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  createNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): Promise<Models.CreateNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.CreateNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Delete a collection of VirtualMachineInstancePreset objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCollectionNamespacedVirtualMachineInstancePresetResponse>
   */
  deleteCollectionNamespacedVirtualMachineInstancePreset(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstancePresetOptionalParams): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstancePreset(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstancePreset(options: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstancePresetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCollectionNamespacedVirtualMachineInstancePreset(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstancePresetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCollectionNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.DeleteCollectionNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Get a VirtualMachineInstancePreset object.
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNamespacedVirtualMachineInstancePresetResponse>
   */
  readNamespacedVirtualMachineInstancePreset(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstancePresetOptionalParams): Promise<Models.ReadNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstancePreset(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstancePreset(name: string, namespace: string, options: Models.KubeVirtAPIReadNamespacedVirtualMachineInstancePresetOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  readNamespacedVirtualMachineInstancePreset(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstancePresetOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): Promise<Models.ReadNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.ReadNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Update a VirtualMachineInstancePreset object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNamespacedVirtualMachineInstancePresetResponse>
   */
  replaceNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplaceNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  replaceNamespacedVirtualMachineInstancePreset(body: Models.V1VirtualMachineInstancePreset, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): Promise<Models.ReplaceNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      replaceNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.ReplaceNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Delete a VirtualMachineInstancePreset object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNamespacedVirtualMachineInstancePresetResponse>
   */
  deleteNamespacedVirtualMachineInstancePreset(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstancePresetOptionalParams): Promise<Models.DeleteNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstancePreset(body: Models.V1DeleteOptions, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstancePreset(body: Models.V1DeleteOptions, namespace: string, name: string, options: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstancePresetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNamespacedVirtualMachineInstancePreset(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstancePresetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      deleteNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.DeleteNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Patch a VirtualMachineInstancePreset object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNamespacedVirtualMachineInstancePresetResponse>
   */
  patchNamespacedVirtualMachineInstancePreset(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstancePreset(body: any, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstancePreset(body: any, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): void;
  patchNamespacedVirtualMachineInstancePreset(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePreset>): Promise<Models.PatchNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      patchNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.PatchNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Get a list of VirtualMachineInstanceReplicaSet objects.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  listNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceReplicaSetOptionalParams): Promise<Models.ListNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstanceReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): void;
  listNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): Promise<Models.ListNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.ListNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Create a VirtualMachineInstanceReplicaSet object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  createNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  createNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): Promise<Models.CreateNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.CreateNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Delete a collection of VirtualMachineInstanceReplicaSet objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  deleteCollectionNamespacedVirtualMachineInstanceReplicaSet(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceReplicaSetOptionalParams): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstanceReplicaSet(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstanceReplicaSet(options: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCollectionNamespacedVirtualMachineInstanceReplicaSet(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCollectionNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Get a VirtualMachineInstanceReplicaSet object.
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  readNamespacedVirtualMachineInstanceReplicaSet(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceReplicaSetOptionalParams): Promise<Models.ReadNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstanceReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstanceReplicaSet(name: string, namespace: string, options: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  readNamespacedVirtualMachineInstanceReplicaSet(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): Promise<Models.ReadNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.ReadNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Update a VirtualMachineInstanceReplicaSet object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  replaceNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplaceNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  replaceNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1VirtualMachineInstanceReplicaSet, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): Promise<Models.ReplaceNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      replaceNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.ReplaceNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Delete a VirtualMachineInstanceReplicaSet object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  deleteNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceReplicaSetOptionalParams): Promise<Models.DeleteNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1DeleteOptions, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1DeleteOptions, namespace: string, name: string, options: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNamespacedVirtualMachineInstanceReplicaSet(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      deleteNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Patch a VirtualMachineInstanceReplicaSet object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  patchNamespacedVirtualMachineInstanceReplicaSet(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstanceReplicaSet(body: any, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstanceReplicaSet(body: any, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): void;
  patchNamespacedVirtualMachineInstanceReplicaSet(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSet>): Promise<Models.PatchNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      patchNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.PatchNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Get a list of VirtualMachineInstance objects.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNamespacedVirtualMachineInstanceResponse>
   */
  listNamespacedVirtualMachineInstance(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceOptionalParams): Promise<Models.ListNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstance(namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNamespacedVirtualMachineInstance(namespace: string, options: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): void;
  listNamespacedVirtualMachineInstance(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineInstanceOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): Promise<Models.ListNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.ListNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Create a VirtualMachineInstance object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedVirtualMachineInstanceResponse>
   */
  createNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  createNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstance>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): Promise<Models.CreateNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.CreateNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Delete a collection of VirtualMachineInstance objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceResponse>
   */
  deleteCollectionNamespacedVirtualMachineInstance(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceOptionalParams): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstance(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachineInstance(options: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCollectionNamespacedVirtualMachineInstance(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCollectionNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.DeleteCollectionNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Get a VirtualMachineInstance object.
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNamespacedVirtualMachineInstanceResponse>
   */
  readNamespacedVirtualMachineInstance(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceOptionalParams): Promise<Models.ReadNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstance(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNamespacedVirtualMachineInstance(name: string, namespace: string, options: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  readNamespacedVirtualMachineInstance(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineInstanceOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstance>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): Promise<Models.ReadNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.ReadNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Update a VirtualMachineInstance object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNamespacedVirtualMachineInstanceResponse>
   */
  replaceNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplaceNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  replaceNamespacedVirtualMachineInstance(body: Models.V1VirtualMachineInstance, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstance>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): Promise<Models.ReplaceNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      replaceNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.ReplaceNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Delete a VirtualMachineInstance object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNamespacedVirtualMachineInstanceResponse>
   */
  deleteNamespacedVirtualMachineInstance(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceOptionalParams): Promise<Models.DeleteNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstance(body: Models.V1DeleteOptions, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNamespacedVirtualMachineInstance(body: Models.V1DeleteOptions, namespace: string, name: string, options: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNamespacedVirtualMachineInstance(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      deleteNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.DeleteNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Patch a VirtualMachineInstance object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNamespacedVirtualMachineInstanceResponse>
   */
  patchNamespacedVirtualMachineInstance(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstance(body: any, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNamespacedVirtualMachineInstance(body: any, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): void;
  patchNamespacedVirtualMachineInstance(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachineInstance>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstance>): Promise<Models.PatchNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      patchNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.PatchNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Get a list of VirtualMachine objects.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNamespacedVirtualMachineResponse>
   */
  listNamespacedVirtualMachine(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineOptionalParams): Promise<Models.ListNamespacedVirtualMachineResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNamespacedVirtualMachine(namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachineList>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNamespacedVirtualMachine(namespace: string, options: Models.KubeVirtAPIListNamespacedVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineList>): void;
  listNamespacedVirtualMachine(namespace: string, options?: Models.KubeVirtAPIListNamespacedVirtualMachineOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineList>): Promise<Models.ListNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.ListNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Create a VirtualMachine object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedVirtualMachineResponse>
   */
  createNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateNamespacedVirtualMachineResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  createNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachine>, callback?: msRest.ServiceCallback<Models.V1VirtualMachine>): Promise<Models.CreateNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.CreateNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Delete a collection of VirtualMachine objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCollectionNamespacedVirtualMachineResponse>
   */
  deleteCollectionNamespacedVirtualMachine(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineOptionalParams): Promise<Models.DeleteCollectionNamespacedVirtualMachineResponse>;
  /**
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachine(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCollectionNamespacedVirtualMachine(options: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCollectionNamespacedVirtualMachine(options?: Models.KubeVirtAPIDeleteCollectionNamespacedVirtualMachineOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCollectionNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCollectionNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.DeleteCollectionNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Get a VirtualMachine object.
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNamespacedVirtualMachineResponse>
   */
  readNamespacedVirtualMachine(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineOptionalParams): Promise<Models.ReadNamespacedVirtualMachineResponse>;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNamespacedVirtualMachine(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  /**
   * @param name Name of the resource
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNamespacedVirtualMachine(name: string, namespace: string, options: Models.KubeVirtAPIReadNamespacedVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  readNamespacedVirtualMachine(name: string, namespace: string, options?: Models.KubeVirtAPIReadNamespacedVirtualMachineOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachine>, callback?: msRest.ServiceCallback<Models.V1VirtualMachine>): Promise<Models.ReadNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.ReadNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Update a VirtualMachine object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNamespacedVirtualMachineResponse>
   */
  replaceNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplaceNamespacedVirtualMachineResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  replaceNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  replaceNamespacedVirtualMachine(body: Models.V1VirtualMachine, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachine>, callback?: msRest.ServiceCallback<Models.V1VirtualMachine>): Promise<Models.ReplaceNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      replaceNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.ReplaceNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Delete a VirtualMachine object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNamespacedVirtualMachineResponse>
   */
  deleteNamespacedVirtualMachine(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineOptionalParams): Promise<Models.DeleteNamespacedVirtualMachineResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  deleteNamespacedVirtualMachine(body: Models.V1DeleteOptions, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNamespacedVirtualMachine(body: Models.V1DeleteOptions, namespace: string, name: string, options: Models.KubeVirtAPIDeleteNamespacedVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNamespacedVirtualMachine(body: Models.V1DeleteOptions, namespace: string, name: string, options?: Models.KubeVirtAPIDeleteNamespacedVirtualMachineOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      deleteNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.DeleteNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Patch a VirtualMachine object.
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNamespacedVirtualMachineResponse>
   */
  patchNamespacedVirtualMachine(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchNamespacedVirtualMachineResponse>;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  patchNamespacedVirtualMachine(body: any, namespace: string, name: string, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  /**
   * @param body
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNamespacedVirtualMachine(body: any, namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1VirtualMachine>): void;
  patchNamespacedVirtualMachine(body: any, namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1VirtualMachine>, callback?: msRest.ServiceCallback<Models.V1VirtualMachine>): Promise<Models.PatchNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        name,
        options
      },
      patchNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.PatchNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Get a list of all VirtualMachineInstanceMigration objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVirtualMachineInstanceMigrationForAllNamespacesResponse>
   */
  listVirtualMachineInstanceMigrationForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceMigrationForAllNamespacesOptionalParams): Promise<Models.ListVirtualMachineInstanceMigrationForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listVirtualMachineInstanceMigrationForAllNamespaces(callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listVirtualMachineInstanceMigrationForAllNamespaces(options: Models.KubeVirtAPIListVirtualMachineInstanceMigrationForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): void;
  listVirtualMachineInstanceMigrationForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceMigrationForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceMigrationList>): Promise<Models.ListVirtualMachineInstanceMigrationForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listVirtualMachineInstanceMigrationForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListVirtualMachineInstanceMigrationForAllNamespacesResponse>;
  }

  /**
   * @summary Get a list of all VirtualMachineInstancePreset objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVirtualMachineInstancePresetForAllNamespacesResponse>
   */
  listVirtualMachineInstancePresetForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstancePresetForAllNamespacesOptionalParams): Promise<Models.ListVirtualMachineInstancePresetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listVirtualMachineInstancePresetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listVirtualMachineInstancePresetForAllNamespaces(options: Models.KubeVirtAPIListVirtualMachineInstancePresetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): void;
  listVirtualMachineInstancePresetForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstancePresetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstancePresetList>): Promise<Models.ListVirtualMachineInstancePresetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listVirtualMachineInstancePresetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListVirtualMachineInstancePresetForAllNamespacesResponse>;
  }

  /**
   * @summary Get a list of all VirtualMachineInstanceReplicaSet objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVirtualMachineInstanceReplicaSetForAllNamespacesResponse>
   */
  listVirtualMachineInstanceReplicaSetForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceReplicaSetForAllNamespacesOptionalParams): Promise<Models.ListVirtualMachineInstanceReplicaSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listVirtualMachineInstanceReplicaSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listVirtualMachineInstanceReplicaSetForAllNamespaces(options: Models.KubeVirtAPIListVirtualMachineInstanceReplicaSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): void;
  listVirtualMachineInstanceReplicaSetForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceReplicaSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceReplicaSetList>): Promise<Models.ListVirtualMachineInstanceReplicaSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listVirtualMachineInstanceReplicaSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListVirtualMachineInstanceReplicaSetForAllNamespacesResponse>;
  }

  /**
   * @summary Get a list of all VirtualMachineInstance objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVirtualMachineInstanceForAllNamespacesResponse>
   */
  listVirtualMachineInstanceForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceForAllNamespacesOptionalParams): Promise<Models.ListVirtualMachineInstanceForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listVirtualMachineInstanceForAllNamespaces(callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listVirtualMachineInstanceForAllNamespaces(options: Models.KubeVirtAPIListVirtualMachineInstanceForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): void;
  listVirtualMachineInstanceForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineInstanceForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineInstanceList>): Promise<Models.ListVirtualMachineInstanceForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listVirtualMachineInstanceForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListVirtualMachineInstanceForAllNamespacesResponse>;
  }

  /**
   * @summary Get a list of all VirtualMachine objects.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListVirtualMachineForAllNamespacesResponse>
   */
  listVirtualMachineForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineForAllNamespacesOptionalParams): Promise<Models.ListVirtualMachineForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listVirtualMachineForAllNamespaces(callback: msRest.ServiceCallback<Models.V1VirtualMachineList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listVirtualMachineForAllNamespaces(options: Models.KubeVirtAPIListVirtualMachineForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1VirtualMachineList>): void;
  listVirtualMachineForAllNamespaces(options?: Models.KubeVirtAPIListVirtualMachineForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1VirtualMachineList>, callback?: msRest.ServiceCallback<Models.V1VirtualMachineList>): Promise<Models.ListVirtualMachineForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listVirtualMachineForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListVirtualMachineForAllNamespacesResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstanceMigration object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNamespacedVirtualMachineInstanceMigrationResponse>
   */
  watchNamespacedVirtualMachineInstanceMigration(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceMigrationOptionalParams): Promise<Models.WatchNamespacedVirtualMachineInstanceMigrationResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstanceMigration(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstanceMigration(namespace: string, options: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceMigrationOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNamespacedVirtualMachineInstanceMigration(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceMigrationOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNamespacedVirtualMachineInstanceMigrationResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNamespacedVirtualMachineInstanceMigrationOperationSpec,
      callback) as Promise<Models.WatchNamespacedVirtualMachineInstanceMigrationResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstancePreset object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNamespacedVirtualMachineInstancePresetResponse>
   */
  watchNamespacedVirtualMachineInstancePreset(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstancePresetOptionalParams): Promise<Models.WatchNamespacedVirtualMachineInstancePresetResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstancePreset(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstancePreset(namespace: string, options: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstancePresetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNamespacedVirtualMachineInstancePreset(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstancePresetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNamespacedVirtualMachineInstancePresetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNamespacedVirtualMachineInstancePresetOperationSpec,
      callback) as Promise<Models.WatchNamespacedVirtualMachineInstancePresetResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstanceReplicaSet object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNamespacedVirtualMachineInstanceReplicaSetResponse>
   */
  watchNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceReplicaSetOptionalParams): Promise<Models.WatchNamespacedVirtualMachineInstanceReplicaSetResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstanceReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNamespacedVirtualMachineInstanceReplicaSet(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNamespacedVirtualMachineInstanceReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNamespacedVirtualMachineInstanceReplicaSetOperationSpec,
      callback) as Promise<Models.WatchNamespacedVirtualMachineInstanceReplicaSetResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstance object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNamespacedVirtualMachineInstanceResponse>
   */
  watchNamespacedVirtualMachineInstance(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceOptionalParams): Promise<Models.WatchNamespacedVirtualMachineInstanceResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstance(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNamespacedVirtualMachineInstance(namespace: string, options: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNamespacedVirtualMachineInstance(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineInstanceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNamespacedVirtualMachineInstanceResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNamespacedVirtualMachineInstanceOperationSpec,
      callback) as Promise<Models.WatchNamespacedVirtualMachineInstanceResponse>;
  }

  /**
   * @summary Watch a VirtualMachine object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNamespacedVirtualMachineResponse>
   */
  watchNamespacedVirtualMachine(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineOptionalParams): Promise<Models.WatchNamespacedVirtualMachineResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNamespacedVirtualMachine(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNamespacedVirtualMachine(namespace: string, options: Models.KubeVirtAPIWatchNamespacedVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNamespacedVirtualMachine(namespace: string, options?: Models.KubeVirtAPIWatchNamespacedVirtualMachineOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNamespacedVirtualMachineResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNamespacedVirtualMachineOperationSpec,
      callback) as Promise<Models.WatchNamespacedVirtualMachineResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstanceMigrationList object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchVirtualMachineInstanceMigrationListForAllNamespacesResponse>
   */
  watchVirtualMachineInstanceMigrationListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceMigrationListForAllNamespacesOptionalParams): Promise<Models.WatchVirtualMachineInstanceMigrationListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchVirtualMachineInstanceMigrationListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchVirtualMachineInstanceMigrationListForAllNamespaces(options: Models.KubeVirtAPIWatchVirtualMachineInstanceMigrationListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchVirtualMachineInstanceMigrationListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceMigrationListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchVirtualMachineInstanceMigrationListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchVirtualMachineInstanceMigrationListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchVirtualMachineInstanceMigrationListForAllNamespacesResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstancePresetList object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchVirtualMachineInstancePresetListForAllNamespacesResponse>
   */
  watchVirtualMachineInstancePresetListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstancePresetListForAllNamespacesOptionalParams): Promise<Models.WatchVirtualMachineInstancePresetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchVirtualMachineInstancePresetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchVirtualMachineInstancePresetListForAllNamespaces(options: Models.KubeVirtAPIWatchVirtualMachineInstancePresetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchVirtualMachineInstancePresetListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstancePresetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchVirtualMachineInstancePresetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchVirtualMachineInstancePresetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchVirtualMachineInstancePresetListForAllNamespacesResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstanceReplicaSetList object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchVirtualMachineInstanceReplicaSetListForAllNamespacesResponse>
   */
  watchVirtualMachineInstanceReplicaSetListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceReplicaSetListForAllNamespacesOptionalParams): Promise<Models.WatchVirtualMachineInstanceReplicaSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchVirtualMachineInstanceReplicaSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchVirtualMachineInstanceReplicaSetListForAllNamespaces(options: Models.KubeVirtAPIWatchVirtualMachineInstanceReplicaSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchVirtualMachineInstanceReplicaSetListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceReplicaSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchVirtualMachineInstanceReplicaSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchVirtualMachineInstanceReplicaSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchVirtualMachineInstanceReplicaSetListForAllNamespacesResponse>;
  }

  /**
   * @summary Watch a VirtualMachineInstanceList object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchVirtualMachineInstanceListForAllNamespacesResponse>
   */
  watchVirtualMachineInstanceListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceListForAllNamespacesOptionalParams): Promise<Models.WatchVirtualMachineInstanceListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchVirtualMachineInstanceListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchVirtualMachineInstanceListForAllNamespaces(options: Models.KubeVirtAPIWatchVirtualMachineInstanceListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchVirtualMachineInstanceListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineInstanceListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchVirtualMachineInstanceListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchVirtualMachineInstanceListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchVirtualMachineInstanceListForAllNamespacesResponse>;
  }

  /**
   * @summary Watch a VirtualMachineList object.
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchVirtualMachineListForAllNamespacesResponse>
   */
  watchVirtualMachineListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineListForAllNamespacesOptionalParams): Promise<Models.WatchVirtualMachineListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchVirtualMachineListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchVirtualMachineListForAllNamespaces(options: Models.KubeVirtAPIWatchVirtualMachineListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchVirtualMachineListForAllNamespaces(options?: Models.KubeVirtAPIWatchVirtualMachineListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchVirtualMachineListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchVirtualMachineListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchVirtualMachineListForAllNamespacesResponse>;
  }

  /**
   * @summary Get a KubeVirt API Group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIGroup1Response>
   */
  getAPIGroup1(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIGroup1Response>;
  /**
   * @param callback The callback
   */
  getAPIGroup1(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIGroup1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAPIGroup1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAPIGroup1Response> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIGroup1OperationSpec,
      callback) as Promise<Models.GetAPIGroup1Response>;
  }

  /**
   * @summary Get a KubeVirt API resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIResources1Response>
   */
  getAPIResources1(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIResources1Response>;
  /**
   * @param callback The callback
   */
  getAPIResources1(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIResources1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAPIResources1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAPIResources1Response> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIResources1OperationSpec,
      callback) as Promise<Models.GetAPIResources1Response>;
  }

  /**
   * @summary Health endpoint
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  checkHealth(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  checkHealth(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkHealth(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  checkHealth(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkHealthOperationSpec,
      callback);
  }

  /**
   * @summary Open a websocket connection to a serial console on the specified
   * VirtualMachineInstance.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  console(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  console(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  console(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  console(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      consoleOperationSpec,
      callback);
  }

  /**
   * @summary Test endpoint verifying apiserver connectivity.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  test(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  test(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  test(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  test(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      testOperationSpec,
      callback);
  }

  /**
   * @summary Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  vnc(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  vnc(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  vnc(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  vnc(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      vncOperationSpec,
      callback);
  }

  /**
   * @summary Restart a VirtualMachine object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  restart(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  restart(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  restart(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      restartOperationSpec,
      callback);
  }

  /**
   * @summary Start a VirtualMachine object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  start(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  start(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  start(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      startOperationSpec,
      callback);
  }

  /**
   * @summary Stop a VirtualMachine object.
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(namespace: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param callback The callback
   */
  stop(namespace: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param namespace Object name and auth scope, such as for teams and projects
   * @param name Name of the resource
   * @param options The optional parameters
   * @param callback The callback
   */
  stop(namespace: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stop(namespace: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        name,
        options
      },
      stopOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  version(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  version(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  version(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  version(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      versionOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  func7(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  func7(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  func7(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  func7(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      func7OperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAPIGroupListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroupList
    },
    404: {},
    default: {
      bodyMapper: Mappers.V1APIGroupList
    }
  },
  serializer
};

const getAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    404: {},
    default: {
      bodyMapper: Mappers.V1APIGroup
    }
  },
  serializer
};

const getAPIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    404: {},
    default: {
      bodyMapper: Mappers.V1APIResourceList
    }
  },
  serializer
};

const listNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigrationList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigrationList
    }
  },
  serializer
};

const createNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations",
  urlParameters: [
    Parameters.namespace
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstanceMigration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    202: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    }
  },
  serializer
};

const deleteCollectionNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const readNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    }
  },
  serializer
};

const replaceNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstanceMigration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    }
  },
  serializer
};

const deleteNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const patchNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancemigrations/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigration
    }
  },
  serializer
};

const listNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePresetList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePresetList
    }
  },
  serializer
};

const createNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets",
  urlParameters: [
    Parameters.namespace
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstancePreset,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    202: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    }
  },
  serializer
};

const deleteCollectionNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const readNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    }
  },
  serializer
};

const replaceNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstancePreset,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    }
  },
  serializer
};

const deleteNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const patchNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancepresets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePreset
    }
  },
  serializer
};

const listNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSetList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSetList
    }
  },
  serializer
};

const createNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets",
  urlParameters: [
    Parameters.namespace
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstanceReplicaSet,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    202: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    }
  },
  serializer
};

const deleteCollectionNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const readNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    }
  },
  serializer
};

const replaceNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstanceReplicaSet,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    }
  },
  serializer
};

const deleteNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const patchNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSet
    }
  },
  serializer
};

const listNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceList
    }
  },
  serializer
};

const createNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances",
  urlParameters: [
    Parameters.namespace
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    202: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    }
  },
  serializer
};

const deleteCollectionNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const readNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    }
  },
  serializer
};

const replaceNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachineInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    }
  },
  serializer
};

const deleteNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const patchNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstance
    }
  },
  serializer
};

const listNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineList
    }
  },
  serializer
};

const createNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines",
  urlParameters: [
    Parameters.namespace
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachine,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    202: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachine
    }
  },
  serializer
};

const deleteCollectionNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const readNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachine
    }
  },
  serializer
};

const replaceNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1VirtualMachine,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    201: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachine
    }
  },
  serializer
};

const deleteNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1Status
    }
  },
  serializer
};

const patchNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachine
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachine
    }
  },
  serializer
};

const listVirtualMachineInstanceMigrationForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/virtualmachineinstancemigrations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigrationList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceMigrationList
    }
  },
  serializer
};

const listVirtualMachineInstancePresetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/virtualmachineinstancepresets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstancePresetList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstancePresetList
    }
  },
  serializer
};

const listVirtualMachineInstanceReplicaSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/virtualmachineinstancereplicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSetList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceReplicaSetList
    }
  },
  serializer
};

const listVirtualMachineInstanceForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/virtualmachineinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineInstanceList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineInstanceList
    }
  },
  serializer
};

const listVirtualMachineForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/virtualmachines",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1VirtualMachineList
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1VirtualMachineList
    }
  },
  serializer
};

const watchNamespacedVirtualMachineInstanceMigrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/namespaces/{namespace}/virtualmachineinstancemigrations",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchNamespacedVirtualMachineInstancePresetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/namespaces/{namespace}/virtualmachineinstancepresets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchNamespacedVirtualMachineInstanceReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/namespaces/{namespace}/virtualmachineinstancereplicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchNamespacedVirtualMachineInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/namespaces/{namespace}/virtualmachineinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchNamespacedVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/namespaces/{namespace}/virtualmachines",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchVirtualMachineInstanceMigrationListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/virtualmachineinstancemigrations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchVirtualMachineInstancePresetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/virtualmachineinstancepresets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchVirtualMachineInstanceReplicaSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/virtualmachineinstancereplicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchVirtualMachineInstanceListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/virtualmachineinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const watchVirtualMachineListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/kubevirt.io/v1alpha3/watch/virtualmachines",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {
      bodyMapper: Mappers.V1WatchEvent
    }
  },
  serializer
};

const getAPIGroup1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    404: {},
    default: {
      bodyMapper: Mappers.V1APIGroup
    }
  },
  serializer
};

const getAPIResources1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    404: {},
    default: {
      bodyMapper: Mappers.V1APIResourceList
    }
  },
  serializer
};

const checkHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3/healthz",
  responses: {
    200: {},
    500: {},
    default: {}
  },
  serializer
};

const consoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/console",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const testOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/test",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const vncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/vnc",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const restartOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/restart",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const startOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/start",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const stopOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/stop",
  urlParameters: [
    Parameters.namespace,
    Parameters.name
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const versionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/subresources.kubevirt.io/v1alpha3/version",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const func7OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "openapi/v2",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

export {
  KubeVirtAPI,
  KubeVirtAPIContext,
  Models as KubeVirtAPIModels,
  Mappers as KubeVirtAPIMappers
};
